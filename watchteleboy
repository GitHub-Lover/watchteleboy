#!/bin/bash
################################################
# Bash script for watching/recording online TV 
# streams from teleboy.ch without browser and 
# =no f*** flash=.
#
# License:  GNU GPL v2
# Author:   Alexander Tuchacek
# written:  2011-05-21
# modified by: Roman Haefeli
# modified on: 2011-08-02
# program version  1.2
################################################

VERSION="1.2"

# Set some default values
TMPPATH=/tmp/watchteleboy
UAGENT='Mozilla/5.0 (X11; Linux i686; rv:5.0) Gecko/20100101 Firefox/5.0'
MPLAYEROPTS="-really-quiet"
RECORDPATH=$(pwd)

# Channel list
CHANNELS="
sf1 1 159
sfzwei 8 108
sfinfo 24 0
3plus 170 0
servustv 221 0
ard 11 0
zdf 10 0
pro7 6 0
sat1 7 0
rtl 5 0
vox 13 0
kabel1 31 0
orf1 9 0
orf2 29 0
arte 161 20
3sat 14 0
rtl2 32 0
superrtl 35 0
telezueri 197 0
swrbw 54 0
wdr 30 0
mdr 51 0
ndr 52 0
atv 21 0
dasvierte 172 0
dmax 15 0
euronews 216 0
n-tv 40 0
phoenix 53 0
zdfneo 12 0
sport1 33 0
eurosport 39 0
deluxemusic 192 0
viva 17 0
cnn 41 0
bbcone 69 0
bbctwo 189 0
bbcworldnews 43 0
cnbceurope 46 0
itv1 70 0
itv2 71 0
aljazeera 215 0
tsr1 25 162
tsr2 26 163
tf1 36 0
france2 37 0
france3 214 0
m6 38 0
tv5 48 0
gulli 212 0
w9 219 0
france 211 0
euronews 158 0
rsila1 27 164
rsila2 28 0
rai1 105 0
rai2 106 0
rai3 107 0
canale5 202 0
italia1 201 0
raisport1 204 0
rtpi 213 0
tvei 47 0
trt1 210 0
rete4 203 0
mtv 207 0
nickelodeon 22 0
euronews 217 0
euronews 45 0
la7 205 0
joiz 501 0
cielo 209 0
rtl1025 206 0
rainews24 208 0
"

# Check dependencies
programlist="rtmpdump mplayer wget grep cut crontab date"
for program in $programlist
do
    if ! which $program > /dev/null
    then
        echo "ERROR:" 1>&2
        echo "Could not find ${program}. Is it installed?" 1>&2
        exit 1
    fi
done

# Read config (overrides default values) or create it
CONFIG=~/.watchteleboyrc
if [ -f $CONFIG ]
then
  . $CONFIG
else
  echo "In order for this script to work properly you need to"
  echo "provide your user credentials for the teleboy.ch"
  echo "service."
  while true
  do
    read -p "Please enter your user name: " USER
    read -s -p "Please enter your password:  " PASS
    echo ""
    read -s -p "Confirm your password:       " PASS2
    echo "" 
    if [ "$PASS" = "$PASS2" ]
    then
      break
    else
      echo "The password entries don't match."
    fi
  done  
  echo "CAUTION: writing plain text password to the config file!"
  echo "USER='$USER'" >> $CONFIG
  echo "PASS='$PASS'" >> $CONFIG
  echo "created config file $CONFIG"  
fi

# Comandline argument parsing
channel=false
deleteme=false
duration=false
endtime=false
help=false
list=false
path=false
record=false
showname=false
starttime=false
version=false
while [ $# -gt 0 ]
do
  case "$1" in
    -c|--channel) channel=true; CHANNEL=$2; shift;;
    -d|--duration) duration=true; DURATION="$2"; shift;;
    -e|--endtime) endtime=true; ENDTIME="$2"; shift;;
    -h|--help) help=true;;
    -l|--list) list=true;;
    -n|--showname) showname=true; SHOWNAME="$2"; shift;;
    -m|--mplayer-opts) mplayeropts=true; MPLAYEROPTS="$2"; shift;;
    -p|--path) path=true; RECORDPATH="$2"; shift;;
    -r|--record) record=true;;
    -t|--starttime) starttime=true; STARTTIME="$2"; shift;;
    -v|--version) version=true;;
    --deleteme) deleteme=true; DELETEME="$2"; shift;;
    -*) echo "$(basename $0): error - unrecognized option '$1'" 1>&2
        echo "use '$(basename $0) --help' to get a list of available options" 1>&2
        exit 1;;
    *)  break;;
  esac
  shift
done

# option -v|--version
if $version
then
  echo "watchteleboy $VERSION"
  echo "written by Alexander Tuchacek & Roman Haefeli"
  echo "Licensed under the GNU Public License 2.0 (GPL-2)"
  exit
fi

# option -l|--list
if $list
then
  echo "$CHANNELS" | cut -d " " -f 1 
  exit
fi

# option -h|--help
if $help
then
  cat << EOF

watchteleboy
------------

  <no options>            go into interactive mode

GENERAL OPTIONS:

  -c|--channel CHANNEL    specify a channel
  -h|--help               show this help and exit
  -l|--list               print a list of all channels and exit
  -v|--version            print the version of this program

OPTIONS FOR RECORDING (require -r|--record):

  -e|--endtime TIME       schedule the end time of the recording
  -d|--duration SECONDS	  specify the duration of the recording
  -n|--showname SHOWNAME  specify file name prefix
  -p|--path DIR		  specify target directory
  -r|--record             record a stream instead of watching it
  -t|--starttime TIME	  schedule the start time for a recording

MPLAYER SPECIFIC OPTIONS:

  -m|--mplayer-opts OPTS  pass options to mplayer

EOF
  exit
fi

# Check record path validity
if $record
then
  if [ ! -d "$RECORDPATH" ]
  then
    echo "There is no such directory: $RECORDPATH" 1>&2
    exit 1
  elif [ ! -w "$RECORDPATH" ]
  then
    echo "You don't have permission to write to $RECORDPATH" 1>&2
    exit 1
  fi
fi

# Create TMPDIR if required
if  [ ! -d $TMPPATH ]
then
  mkdir -p $TMPPATH
fi

# get the session cookie
POST="login=${USER}&password=${PASS}&x=13&y=17&followup=%2Ftv%2Fplayer%2Fplayer.php"
URL="http://www.teleboy.ch/layer/rectv/free_live_tv.inc.php"
COOKIE=$(wget -U "$UAGENT" \
  --quiet \
  --no-check-certificate \
  --save-cookies /dev/stdout \
  --keep-session-cookies \
  --post-data $POST \
  -O $TMPPATH/step1.html \
  $URL)

# check if login was succesful
cat $TMPPATH/step1.html | grep "Falsche Eingaben" > /dev/null || \
cat $TMPPATH/step1.html | grep "<h1>Login f&uuml;r Member</h1>" > /dev/null
if [ $? -eq 0 ]
then
  echo "login failed!!!!" 1>&2
  echo "Please check your credentials in the config file:" 1>&2
  echo "$CONFIG" 1>&2
  exit 1
else
  echo "login ok..." 
fi

# get flashplayer url
SWFFILE=$(wget \
  -O - \
  --quiet \
  "http://www.teleboy.ch/tv/player/player.php" | \
  grep "nelloplayer" | \
  cut -d'"' -f2 | \
  tail -n1)

# Da Time Valeditee Checkah
function check_time_validity {
  # ARGS:
  # 1: datetime string
  if ! date -d "$1" > /dev/null
  then
    echo "Could not understand time format." 1>&2
    exit 1
  fi
}

function compose_rtmp_command {
  # ARGS:
  # 1: channel
  # 2: output file
  cid=$(echo "$CHANNELS" | grep "^${1} " | cut -d" " -f2)
  cid2=$(echo "$CHANNELS" | grep "^${1} " | cut -d" " -f3)
  URLBASE="http://www.teleboy.ch/tv/player"
  POST="cmd=getLiveChannelParams&cid=${cid}&cid2=${cid2}"
  STREAMINFO=$(wget -U "$UAGENT" \
    --quiet \
    --referer "${URLBASE}/player.php" \
    --load-cookies <(echo "$COOKIE") \
    --post-data $POST \
    --keep-session-cookies \
    --output-document /dev/stdout \
    "${URLBASE}/includes/ajax.php")

  # get rtmp parameters
  x11=$(echo "$STREAMINFO" | cut -d "|" -f11)
  c1=$(echo "$STREAMINFO"  | cut -d "|" -f4)
  c2=$(echo "$STREAMINFO"  | cut -d "|" -f5)
  c3=$(echo "$STREAMINFO"  | cut -d "|" -f6)
  c4=$(echo "$STREAMINFO"  | cut -d "|" -f7)
  c5=$(echo "$STREAMINFO"  | cut -d "|" -f8)
  c6=$(echo "$STREAMINFO"  | cut -d "|" -f9)
  gip=$(echo "$STREAMINFO"  | cut -d "|" -f10)
  playpath=${cid}${c2}.stream

  # LOESCHI / show channel name
  echo "$STREAMINFO"  | cut -d "|" -f2
  
  # get IP address of streaming server
  GIPURL="${URLBASE}/includes/getserver.php?version=${gip}&nocache=1314619521398"
  wget -U "$UAGENT" \
    --quiet \
    -O $TMPPATH/step4.html \
    $GIPURL
  IP=$(cat $TMPPATH/step4.html | cut -d "=" -f2)

  # rtmpdump command
  RTMP="rtmpdump 
    -r rtmp://${IP}/${x11} 
    -a ${x11}
    -f LNX 10,3,183,7 
    -W ${URLBASE}/${SWFFILE} 
    -p ${URLBASE}/player.php 
    -y $playpath
    -C S:$c1 -C S:$c2 -C S:$c3 -C S:$c4 -C S:$c5
    -q 
    -o $2 "
}

# test channel input validity
function chan_validity {
  # ARGS:
  # 1: channel
  if [ -z "$CHANNEL" ]
  then
    echo "Please specify a channel"
    return 1
  elif echo $CHANNELS | grep $1 > /dev/null
  then
    return 0
  else
    echo "'$CHANNEL' is not a valid channel." 1>&2
    echo "Use '--list' to display available channels." 1>&2
    return 1
  fi
}

# channel selector
function chan_selectah {
  while true
  do
    echo -e "\nAVAILABLE CHANNELS:"
    echo "$CHANNELS" | cut -d " " -f 1 | tr "\n" " "
    echo ""
    read -p "Select TV Channel: " -e SEL
    if [ -n "$SEL" ]
    then
      echo $CHANNELS | grep $SEL > /dev/null && \
        CHANNEL="$SEL" && \
        break
      echo "Channel '$SEL' is not available..." 
      sleep 1
    fi
  done 
}

function require_r_opt {
  # ARGS:
  # 1: option name
  if $record
  then
    return 0
  else
    echo "The option '--${1}' requires the '--record' option" 1>&2
    exit 1
  fi
}

# option -t|--starttime
crontempfile="/tmp/crontab.${USER}.watchteleboy"
if $starttime
then
  require_r_opt "starttime"
  if $endtime || $duration
  then
    check_time_validity "$STARTTIME"
    starttimeepoch=$(date -d "$STARTTIME" +%s)
    if [ $starttimeepoch -lt $(date +%s) ]
    then
      echo "The specified start time is already over." 1>&2
      exit 1
    fi
    if $endtime
    then
      check_time_validity "$ENDTIME"
      endtimeepoch=$(date -d "$ENDTIME" +%s)
      if [ $endtimeepoch -lt $starttimeepoch ]
      then
        echo "The specified end time is before the start time." 1>&2
        exit 1
      fi
      let DURATION=$endtimeepoch-$starttimeepoch
    elif $duration
    then
      if ! [ "$DURATION" -ge 0 ] 2>&-
      then
        echo "The specified duration '$DURATION' is not a number." 1>&2
        exit 1
      fi
    fi
    if $channel
    then
      chan_validity $CHANNEL || exit 1
    else
      echo "You need to specify a channel with '--channel'" 1>&2
      exit 1
    fi
    # Now we have validated all required parameters
    echo "Scheduled for recording:"
    echo -e "Start time:\t$(date -d "$STARTTIME" "+%a, %F %H:%M")"
    $endtime && echo -e "End time:\t$(date -d "$ENDTIME" "+%a, %F %H:%M")"
    $duration && echo -e "Duration:\t${DURATION} sec"
    echo -e "Channel:\t$CHANNEL"
    echo -e "Directory:\t$RECORDPATH"
    $showname && echo -e "Show:\t\t$SHOWNAME"
    read -p "Are those settings correct? (Y/n) "
    if [ "$REPLY" == "n" ]
    then
      echo "Cancelled by user. Quit." 1>&2
      exit 1
    fi
    crontab -l > /dev/null 2>&1 && crontab -l > $crontempfile || touch $crontempfile
    echo -ne "$(date -d "$STARTTIME" +"%M %H %d %m") *\t${0} --record " >> $crontempfile
    echo -ne "--channel ${CHANNEL} --duration ${DURATION} " >> $crontempfile
    echo -ne "--deleteme ${RANDOM}${RANDOM} " >> $crontempfile
    $showname && echo -ne "--showname '${SHOWNAME}' " >> $crontempfile
    echo -ne "--path ${RECORDPATH}\n" >> $crontempfile
    crontab < $crontempfile
    rm $crontempfile
    echo "Done."
    exit 0
  else 
    echo "You must specify either --duration or --endtime" 1>&2
    exit 1
  fi
fi

# option --deleteme
if $deleteme
then
  crontab -l > $crontempfile
  sed -i "/$DELETEME/ d" $crontempfile
  crontab < $crontempfile
  rm $crontempfile
fi

# Compose mplayer command
MPLAYER="mplayer $MPLAYEROPTS - "

# Compose rmtpdump output filename
function compose_outfile {
  # ARGS:
  # 1: Channel
  if $record
  then
    if $showname
    then
      OUTFILE=${RECORDPATH}/${SHOWNAME}_$(date +%Y%m%d%H%M).flv
    else
      OUTFILE=${RECORDPATH}/${1}_$(date +%Y%m%d%H%M).flv
    fi
  else
    OUTFILE="-"
  fi
} 

function player_recorder {
  # ARGS:
  # 1: Channel
  compose_outfile $1
  compose_rtmp_command $1 $OUTFILE
  if $record
  then
    $RTMP &
    PID=$!
  else
    $RTMP | $MPLAYER 2> /dev/null
  fi
}

# Da Keestroke Waitah
function  wait_s_key {
  echo "Press the 's' key to stop the recording." 
  keypress=""
  while [ "$keypress" != "s" ]
  do
    read -s -n1  keypress
  done
}

# option -e|--endtime
if $endtime && ! $duration
then
  require_r_opt "endtime"
  check_time_validity "$ENDTIME"
  endtimeepoch=$(date -d "$ENDTIME" +%s)
  nowepoch=$(date +%s)
  if [ $endtimeepoch -lt $nowepoch ]
  then
    echo "The specified end time is already over." 1>&2
    exit 1
  fi
  let DURATION=${endtimeepoch}-${nowepoch}
  duration=true
fi

# option -d|--duration
if $duration
then
  require_r_opt "duration"
  if ! [ "$DURATION" -ge 0 ] 2>&-
  then
    echo "The specified duration '$DURATION' is not a number." 1>&2
    exit 1
  fi
  chan_validity $CHANNEL || exit 1
  player_recorder $CHANNEL
  echo "Now recording $CHANNEL for $DURATION seconds."
  sleep $DURATION
  kill $PID
  echo "Stopped recording."
  exit 0
fi

# option -c|--channel
if $channel
then
  if chan_validity $CHANNEL
  then
    if $record
    then
      player_recorder $CHANNEL
      echo "Now recording:"
      wait_s_key
      kill $PID
      echo "Stopped recording."
      exit 0
    else
      echo "Now playing:"
      player_recorder $CHANNEL
    fi
    exit 0
  else
    echo "Channel '$CHANNEL' is not available..." 1>&2
    exit 1
  fi
fi

# Loop for interactive mode
while true
do
  chan_selectah
  if $record
  then
    player_recorder $CHANNEL
    echo "Now recording ${CHANNEL}..."
    wait_s_key
    kill $PID
    echo "Stopped recording."
  else
    echo "Now playing ${CHANNEL}..."
    player_recorder $CHANNEL
  fi
done

exit 0

