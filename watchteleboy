#!/bin/bash -i
################################################
# Bash script for watching/recording online TV 
# streams from teleboy.ch without browser and 
# =no adobe flashplayer=.
#
# License:  GnuGPL v2
# Authors:   
#   2011-2016   Roman Haefeli
#   2012        Doma Smoljo
#   2011        Alexander Tuchaček 
# 
# program version: (check below)
################################################

VERSION=1.20

# Set some default values
TMPDIR=/tmp
UAGENT='Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:12.0) Gecko/20100101 Firefox/12.0'
MPLAYEROPTS="-really-quiet"
MPVOPTS="--really-quiet --keep-open"
RECORDPATH=$(pwd)
LIVEPAUSE=true
BUFFERSECONDS=5
TELEBOY_AUTHENTICATED=false
SCRIPTNAME=$(basename $0)

function printerr {
  # print error message to stderr
  # ARG1: error message
  $quiet || echo "$1" >&2
  return 0
}

# Comandline argument parsing
channel=false
deletecron=false
deleteme=false
duration=false
endtime=false
help=false
list=false
path=false
quiet=false
record=false
showname=false
starttime=false
version=false
while [ $# -gt 0 ]
do
  case "$1" in
    -b|--live) LIVEPAUSE=$2; shift;;
    -c|--channel) channel=true; CHANNEL="$2"; shift;;
    -d|--duration) duration=true; DURATION="$2"; shift;;
    -e|--endtime) endtime=true; ENDTIME="$2"; shift;;
    -h|--help) help=true;;
    -l|--list) list=true;;
    -n|--showname) showname=true; SHOWNAME="$2"; shift;;
    -m|--mplayer-opts) mplayeropts=true; MPLAYEROPTS="$2"; shift;;
    -p|--path) path=true; RECORDPATH="$2"; shift;;
    -q|--quiet) quiet=true;;
    -r|--record) record=true;;
    -t|--starttime) starttime=true; STARTTIME="$2"; shift;;
    -v|--version) version=true;;
    --deleteme) deleteme=true; DELETEME="$2"; shift;;
    --delete-cron) deletecron=true; DELCHAN="$2"; DELTIME="$3"; shift; shift;;
    -*) printerr "$SCRIPTNAME: error - unrecognized option '$1'"
        printerr "use '$SCRIPTNAME --help' to get a list of available options"
        exit 1;;
    *)  break;;
  esac
  shift
done

# option -v|--version
if $version
then
  echo "$SCRIPTNAME $VERSION"
  echo "Authors:   
  2011-2016   Roman Haefeli
  2012        Doma Smoljo
  2011        Alexander Tuchaček"
  echo "Licensed under the GNU Public License 2.0 (GPL-2)"
  exit
fi

# option -h|--help
if $help
then
  cat << EOF

$SCRIPTNAME
------------

  <no options>                go into interactive mode

GENERAL OPTIONS:

  -c|--channel CHANNEL        specify a channel
  --delete-cron CHANNEL TIME  delete a previously scheduled job
  -h|--help                   show this help and exit
  -l|--list                   print a list of all channels and exit
  -q|--quiet                  suppress any output and do not ask
  -v|--version                print the version of this program

WATCHING OPTIONS:

  -b|--livepause true|false   turn live pausing (buffering) on/off

RECORDING OPTIONS (require -r|--record):

  -e|--endtime TIME           schedule the end time of the recording
  -d|--duration SECONDS	      specify the duration of the recording
  -n|--showname SHOWNAME      specify file name prefix
  -p|--path DIR		      specify target directory
  -r|--record                 record a stream instead of watching it
  -t|--starttime TIME	      schedule the start time for a recording

EOF
  exit
fi

# option --delete-cron
# delete cron entry (used by tvbrowser record plugin)
if $deletecron
then
  if ! date -d "$DELTIME" > /dev/null 2>&1
  then
    printerr "Could not parse specified time: $DELTIME"
    exit 1
  fi
  crontempfile="/tmp/crontab.tmp"
  searchstring="$(date -d "$DELTIME" +"^%M[[:space:]]%H[[:space:]]%d[[:space:]]%m").*${SCRIPTNAME}.*channel[[:space:]]'${DELCHAN}'.*"
  if ! crontab -l | grep "$searchstring" > /dev/null
  then
    printerr "Could not find specified job in crontab."
    exit 1
  else
    crontab -l | grep -v "$searchstring" > $crontempfile 
    crontab < $crontempfile
    rm $crontempfile
    $quiet || echo "Successfully deleted crontab entry."
    exit 0
  fi
fi

# option --deleteme
if $deleteme
then
  crontempfile="/tmp/crontab.tmp"
  crontab -l > $crontempfile
  sed -i "/$DELETEME/d" $crontempfile
  crontab < $crontempfile
  rm $crontempfile
fi

# Check record path validity
if $record
then
  if [ ! -d "$RECORDPATH" ]
  then
    printerr "There is no such directory: $RECORDPATH"
    exit 1
  elif [ ! -w "$RECORDPATH" ]
  then
    printerr "You don't have permission to write to $RECORDPATH"
    exit 1
  fi
fi

# Check dependencies
programlist="crontab curl grep jq sed"
for program in $programlist
do
    if ! which $program > /dev/null
    then
        printerr "Could not find ${program}. Is it installed?"
        exit 1
    fi
done

# Check player dependency (mpv, mplayer in that order)
if which mpv > /dev/null
then
  PLAYER=mpv
elif which mplayer > /dev/null
then
  PLAYER=mplayer
else
  printerr "No suitable player found: mpv, mplayer"
  printerr "Please install mpv or mplayer, before using"
  printerr "this script."
  exit 1
fi

# whiptail dialog boxes are optional (fallback to tradition shell dialogs)
whiptail=$(which whiptail > /dev/null && echo true || echo false)

# Read config (overrides default values) or create it
CONFIG="$HOME/.${SCRIPTNAME}rc"
if [ -f $CONFIG ]
then
  . $CONFIG
else
  cat << EOF > $CONFIG
##########################################################################
# CONFIGURATION FILE FOR $SCRIPTNAME                                     #
# Feel free to adapt to your needs                                       #
##########################################################################


# Set directory where played streams are cached:

TMPDIR='$TMPDIR'

# $SCRIPTNAME allows you to use either mpv or mplayer. Since both
# players are not fully compatible, use separate configurations
# for each player.
# mpv flags:

MPVOPTS='$MPVOPTS'

# mplayer flags:

MPLAYEROPTS='$MPLAYEROPTS'

# Where should stream recordings be saved?
# This can be overridden by the -p/--path flag:

#RECORDPATH='~/mytvshows'

# This parameter turns live stream buffering on/off. When turned on,
# you can pause while watching and continue playback anytime later. Also,
# it enables you to seek back and forth within the downloaded buffer. This
# comes at the cost of longer delays when switching channels.
# Allowed values: true, false:

LIVEPAUSE='$LIVEPAUSE'

# How much data should be downloaded before starting playback?
# The value is given in seconds. The playback begins after
# BUFFERSECONDS * BITRATE data has been downloaded.
# This parameter has only effect when LIVEPAUSE is set to true:

BUFFERSECONDS='$BUFFERSECONDS'
EOF
  echo "created config file '$CONFIG'"
fi

#### FUNCTIONS ###################################################
function set_credentials {
  # This makes sure we have TELEBOY_USER and TELEBOY_PASS set,
  # either by reading from the config file or by asking the
  # the user interactively.
  if [ -z "$TELEBOY_USER" ]
  then
    echo "Please provide your Teleboy credentials. If you don't have"
    echo "any, you can create a free account on http://www.teleboy.ch"
    read -p    "Please enter your user name: " TELEBOY_USER
    read -s -p "Please enter your password:  " TELEBOY_PASS
    echo
    setup_work_dir || return 1
    while ! teleboy_login $TELEBOY_USER $TELEBOY_PASS 
    do
      read -p    "Please re-enter your user name: " TELEBOY_USER
      read -s -p "Please re-enter your password:  " TELEBOY_PASS
      echo
    done  
    echo "CAUTION: writing plain text password to the config file!"
    read -p "Proceed? y/N " -n 1 install_configuration
    echo
    if ! [[ "$install_configuration" =~ [Yy] ]]
    then
      printerr "Not saving credentials in config file"
    else
        cat << EOF >> $CONFIG

# Teleboy Login Credentials

TELEBOY_USER='$TELEBOY_USER'
TELEBOY_PASS='$TELEBOY_PASS'
EOF
    fi
  fi
  return 0
}

function setup_work_dir {
  # set working directory for keeping session data
  # and for stream caching
  # no ARGs
  # required vars: TELEBOY_USER
  TMPPATH="${TMPDIR}/${SCRIPTNAME}/${TELEBOY_USER}"

  # Create TMPDIR 
  if  [ ! -d $TMPPATH ]
  then
    if ! mkdir -p $TMPPATH
    then
      printerr "Could not create directory: $TMPPATH"
      return 1
    fi
    chmod 777 "${TMPDIR}/${SCRIPTNAME}"
  fi
}

# remove TMPPATH dir on exit
function cleanup {
  # Delete livestream cache
  # (but _not_ our recording!)
  $record || rm -f "$OUTFILE"
  $quiet || echo ""
}
trap cleanup INT TERM EXIT

# Teleboy Login
function teleboy_login {
  # get the session cookie (cinergy_s) and set TELEBOY_SESSION_ID then login to
  # get auth cookie (cinergy_auth).
  # this seems to be a two-step process, since we need to already have
  # a session cookie before we can attempt a login. It is sufficient to
  # visit any teleboy page to get a session cookie.
  # ARG1: teleboy user name
  # ARG2: teleboy password
  # sets NEW_SESSION, TELEBOY_AUTHENTICATED
  local USER=$1
  local PASS=$2
  if [ -f "$TMPPATH/cookie1" ]
  then
    # When does the current session expire (make it artificially a minute early
    session_expires=$(( $(sed '/cinergy_s/!d;s/^.*\s\(.*\)\s.*\.*\s.*$/\1/' $TMPPATH/cookie1) - 60 ))
    now=$(date +%s)
    if [ "$session_expires" -gt "$now" ] && grep -q cinergy_auth $TMPPATH/cookie1
    then
      $quiet || echo "Already logged in as $USER"
      NEW_SESSION=false
      TELEBOY_AUTHENTICATED=true
      return 0
    fi
  fi
  $quiet || echo -n "login (as '$USER')..."
  local URL="http://www.teleboy.ch/"
  curl --user-agent "$UAGENT" \
    --silent \
    --fail \
    --cookie-jar $TMPPATH/cookie0 \
    --output /dev/null \
    "$URL" || { printerr "error"; return 1; }
  local POST="login=${USER}&password=${PASS}&keep_login=1"
  local URL="http://www.teleboy.ch/login_check"
  curl --user-agent "$UAGENT" \
    --silent \
    --fail \
    --cookie $TMPPATH/cookie0 \
    --cookie-jar $TMPPATH/cookie1 \
    --data $POST \
    --output /dev/null \
    "$URL" || { printerr "could not login"; return 1; }
  
  # Check if login was successfull
  if grep -q cinergy_auth $TMPPATH/cookie1
  then
    $quiet || echo "ok"
    NEW_SESSION=true
    TELEBOY_AUTHENTICATED=true
    return 0
  else
    $quiet || echo "failed"
    rm $TMPPATH/cookie1
    return 1
  fi
}

function teleboy_set_session_id {
  # We need to be logged in for this to work
  # Store value of session cookie (cinergy_s)
  # We only need to do that once per session and every stream request
  $TELEBOY_AUTHENTICATED || { printerr "not logged in yet."; return 1; }
  TELEBOY_SESSION_ID="$(sed '/cinergy_s/!d;/cinergy_s/s/^.*cinergy_s\s//' $TMPPATH/cookie1)"
  if [ "$TELEBOY_SESSION_ID" == "" ]
  then
    printerr "Could not retrieve session cookie (cinergy_s)"
    return 1
  fi
}

function teleboy_create_user_env {
  # Set some variables that are required for accessing the teleboy api.
  # no arguments are taken, but login must have happened (we need the cookie).

  # are we loggin already?
  $TELEBOY_AUTHENTICATED || { printerr "not logged in yet."; return 1; }

  # It seems that key is hard-coded, thus it didn't appear
  # necessary to retrieve its value from the web
  TELEBOY_API_KEY=$(base64 -d <(echo "ZjBlN2JkZmI4MjJmYTg4YzBjN2ExM2Y3NTJhN2U4ZDVjMzc1N2ExM2Y3NTdhMTNmOWMwYzdhMTNmN2RmYjgyMg=="))
  
  # get user id, locale, plus member status
  local url="http://www.teleboy.ch/tv/player/player.php"
  local rawuserdata
  rawuserdata=$(curl \
    --user-agent "$UAGENT" \
    --silent \
    --fail \
    --cookie $TMPPATH/cookie1 \
    --output - \
    "$url") || { printerr "could not get page containing user id"; exit 1; }
  TELEBOY_USER_ID=$(llocal=$(echo "$rawuserdata" | grep " id: " | head -n1); printf "%s\n" "${llocal//[![:digit:]]/}")
  TELEBOY_USER_LOCALE=$(echo "$rawuserdata" | grep " locale: "| cut -d"'" -f2)
  TELEBOY_USER_PLUS=$(llocal=$(echo "$rawuserdata" | grep " plusMember: "); printf "%s\n" "${llocal//[![:digit:]]/}")
  
  # did we get a valid userid?
  if ! [[ "$TELEBOY_USER_ID" =~ ^-?[0-9]+$ ]]
  then 
    printerr "Could not extract a valid user id"
    exit 1
  fi
} 

function teleboy_create_channel_list {
  # get the channel list through the teleboy api
  # CHANNELS is an array containing an element per station
  # Each element follows this format:
  # STATIONNAME/STATIONID
  # no ARGS, but TELEBOY_USER_ID, TELEBOY_API_KEY, NEW_SESSION
  # need to be set

  # check if we're ready
  [ -z "$TELEBOY_USER_ID" ] && { printerr "TELEBOY_USER_ID not set"; return 1; }

  # if we have channel list pre-cached, we use the cache
  local channel_list_file="$TMPPATH/channel_list"
  if [ -f "$channel_list_file" ] && ! $NEW_SESSION
  then
    CHANNELS=($(cat $channel_list_file))
    return 0
  else
    $quiet || echo -n "receiving channel list..."
    local url="http://tv.api.teleboy.ch/users/${TELEBOY_USER_ID}/broadcasts/now?expand=station&stream=true"
    local stationlist_json
    stationlist_json="$(curl \
        --silent \
        --fail \
        --header "x-teleboy-apikey: $TELEBOY_API_KEY" \
        --header "x-teleboy-session: $TELEBOY_SESSION_ID" \
        --output - \
        "$url")" || { printerr "could not download channel list"; exit 1; }
    CHANNELS=($(echo "$stationlist_json" | \
        jq -M '.data.items[] | {(.station.label): .station.id}' | \
        sed '/^  /!d;s/^  "//;s/": /\//'))
    # Check if we received something
    if [ ${#CHANNELS[@]} -gt 0 ]
    then
      $quiet || echo "ok (${#CHANNELS[@]} channels)"
      # write cache
      echo "${CHANNELS[@]}" > "$channel_list_file"
      return 0
    else
      $quiet || echo "failed"
      return 1
    fi
  fi
}

function set_sid_by_channel {
  # Convert selected channel to station_id (sid)
  # set global SID
  # ARG1: channel name
  # CHANNELS needs to be set
  SID=$(
    for channel in ${CHANNELS[@]}
    do
      echo $channel | grep -i ^$1/ | cut -d'/' -f2
    done
  )
  if [[ $SID = *[!0-9]* || "$SID" = "" ]]
  then
    printerr " Could not get a valid sid."
    return 1
  else
    return 0
  fi
}

function teleboy_set_stream_data {
  # Get HLS master url of given channel from teleboy api
  # The following variables need to be set
  # TELEBOY_USER_ID  (numeric user id)
  # TELEBOY_API_KEY
  # TELEBOY_SESSION_ID
  # ARG1: channel
  # sets HLS_MASTER_URL, CHANNEL_LABEL
  local channel=$1
  set_sid_by_channel $channel || return 1
  local url="http://tv.api.teleboy.ch/users/${TELEBOY_USER_ID}/stream/live/${SID}?alternative=false"
  local stream_data_json
  stream_data_json="$(curl \
    --silent \
    --fail \
    --header "x-teleboy-apikey: ${TELEBOY_API_KEY}" \
    --header "x-teleboy-session: ${TELEBOY_SESSION_ID}" \
    --output - \
    "$url")" || { printerr "API request failed"; return 1; }
  HLS_MASTER_URL="$(echo "$stream_data_json" | \
    jq --raw-output '.data.stream.url')"
  CHANNEL_LABEL="$(echo "$stream_data_json" | \
    jq --raw-output '.data.epg.current.station.name')"
  
  # validate data
  local regex='http://[-A-Za-z0-9\+&@#/%?=~_|!:,.;]*[-A-Za-z0-9\+&@#/%=~_|]'
  [[ $HLS_MASTER_URL =~ $regex ]] && return 0 || \
    { printerr "could not extract master url"; return 1; }
}

function print_channel_list {
  # prints channel list
  # requires: CHANNELS
  local channel
  for channel in "${CHANNELS[@]}"
  do
    echo $channel | cut -d'/' -f1
  done
  return 0
}

function dump_hls_stream {
  # ARG1: channel
  # ARG2: output file
  [ -d $TMPPATH ] || return 1

  teleboy_set_stream_data $1 || return 1
  
 # Ugly: We need to print the canonical channel name _before_
  # we start downling in record mode
  $record && ! $quiet && echo "$CHANNEL_LABEL"

  # create array HLS_VARIANTS with urls and bitrates
  hls_extract_variants "$HLS_MASTER_URL" || return 1

  # select variant with highest bitrate
  local variant=${#HLS_VARIANTS[@]}
  HLS_VARIANT_URL="$(hls_select_variant_url $variant)" || return 1
  HLS_VARIANT_BITRATE="$(hls_select_variant_bitrate $variant)" || return 1

  # Download selected variant
  hls_download_variant "$HLS_VARIANT_URL" "$OUTFILE" "$STARTTIME" "$ENDTIME" &
  PID=$!
  return 0
}

# Compose player command
PLAYERCMD="$PLAYER $([ "$PLAYER" == "mpv" ] && echo $MPVOPTS || echo $MPLAYEROPTS) "

# Compose output filename
function compose_outfile {
  # ARG1: Channel
  local channel="$1"
  if $record
  then
    if $showname
    then
      OUTFILE="${RECORDPATH}/$(echo ${SHOWNAME} | sed 's|/|-|g').m2t"
    else
      OUTFILE="${RECORDPATH}/${channel}-$(date +%Y%m%d%H%M).m2t"
    fi
  else
    OUTFILE="$TMPPATH/${channel}-$(date +%Y%m%d%H%M).m2t"
  fi
}

# recorder (mkv) / player with progressbar and caching (flv)
function player_recorder {
  # ARGS:
  # 1: Channel
  local channel="$1"
  compose_outfile "$channel"
  if $record
  then
    $quiet || echo -n "Now recording: "
    dump_hls_stream "$channel" "$OUTFILE" || return 1
  else
    # Hide the terminal cursor
    tput civis -- invisible
    if $LIVEPAUSE
    then
      # Make sure there is an empty OUTFILE
      > "$OUTFILE"
      dump_hls_stream "$1" "$OUTFILE" || return 1

      # calculate buffer size from bitrate of selected stream
      # so that we get consistent waiting times independent from bitrate
      BUFFER=$(( HLS_VARIANT_BITRATE * BUFFERSECONDS / 8 ))

      # Only start mplayer after having downloaded BUFFER bytes
      eval $(resize)
      PROGRESSBARWIDTH=$(( $COLUMNS - 20 ))
      OUTFILESIZE=0
      while [  "$OUTFILESIZE" -lt "$BUFFER" ]
      do
        OUTFILESIZE=$(du -b "$OUTFILE" | cut -f1)
        if ! $quiet
        then
          echo -ne "\r"
          echo -n "  Buffering: ["
          progresscount=$(( $OUTFILESIZE * $PROGRESSBARWIDTH / $BUFFER ))
          progresscount=$((PROGRESSBARWIDTH < progresscount ? PROGRESSBARWIDTH : progresscount))
          for i in $(seq $progresscount); do echo -n "="; done
          progressempty=$(( $PROGRESSBARWIDTH - $progresscount ))
          for i in $(seq $progressempty); do echo -n " "; done
          echo -n "]"
        fi
        sleep 0.1
        if ! kill -0 $PID 2> /dev/null
        then
          code=$(wait $PID; echo $?)
          echo "avconv returned an error code: $code" 1>&2
          sleep 2
          return 1
        fi
      done
      echo -ne "\033[2K" # this clears the current line
      $quiet || echo -ne "\rNow playing: $CHANNEL_LABEL"
      $PLAYERCMD "$OUTFILE" 2> /dev/null
      echo -ne "\033[2K" # this clears the current line
      kill $PID
      rm "$OUTFILE"
    else
      echo -ne "\033[2K" # this clears the current line
      teleboy_set_stream_data "$1"
      $quiet || echo -ne "\rNow playing: $CHANNEL_LABEL"
      $PLAYERCMD "$HLS_MASTER_URL" 2> /dev/null || return 1
    fi
  fi
}

# Da Keestroke Waitah
function  wait_s_key {
  $quiet || echo "Press the 's' key to stop the recording." 
  keypress=""
  while [ "$keypress" != "s" ]
  do
    read -s -n1  keypress
  done
}

# Da Time Valeditee Checkah
function check_time_validity {
  # ARG1: datetime string
  local datetimestring="$1"
  if ! date -d "$datetimestring" &> /dev/null 
  then
    printerr "Could not understand time format: '$datetimestring'"
    return 1
  fi
}

function check_recordpath {
  # no ARGS
  if [ -d "$RECORDPATH" ]
  then
    printerr "No such directory: '$RECORDPATH'"
    return 1
  elif [ -w "$RECORDPATH" ]
  then
    printerr "Directory '$RECORDPATH' is not writable."
    return 1
  fi
  return 0
}

# make sure starttime is before endtime
function check_start_before_end {
  # ARG1: start time (as understood by date)
  # ARG2: end time (as understood by date)
  local starttime="$1"
  local endtime="$2"
  if [ "$(date +%s -d "$starttime")" -ge "$(date +%s -d "$endtime")" ]
  then
    printerr "Given end time '$endtime' is before start time '$starttime'."
    return 1
  fi
  return 0 
}

# test channel input validity
function channel_validity {
  # ARGS:
  # 1: channel
  if [ -z "$CHANNEL" ]
  then
    printerr "Please specify a channel"
    return 1
  elif print_channel_list | grep -i "^${1}$" > /dev/null
  then
    return 0
  else
    printerr "'$CHANNEL' is not a valid channel."
    printerr "Use '--list' to display available channels."
    return 1
  fi
}

# interface appearance
function set_ui_window_params {
  # ARGS:
  # 1: border size
  eval `resize`
  BOXWIDTH=$(( $LINES - 2 * $1 ))
  BOXHEIGHT=$(( $COLUMNS - 2 * $1 ))
  CONTENTHEIGHT=$(( $LINES - 2 * $1 - 8 ))
  TITLE="watchteleboy $VERSION"
  BUTTONLABEL=$( $record && echo "Record" || echo "Play" )
}

# channel dialog
function channel_dialog {
  while true
  do
    chanlist="$(print_channel_list) $( uname | grep "Darwin" > /dev/null && echo QUIT)"
    if $whiptail
    then
      wpsetdefault=""
      [ "$CHANNEL" != "" ] \
        && wpsetdefault="--default-item $CHANNEL" \
        || wpsetdefault=""
      unset whiptail_opts; i=0
      for i in $(echo $chanlist); 
      do 
        whiptail_opts+=("$i")
        whiptail_opts+=("Play channel $i")
      done
      set_ui_window_params 2
      CHANNEL=$(whiptail $wpsetdefault \
        --title "$TITLE" \
        --ok-button "$BUTTONLABEL" \
        --cancel-button Quit \
        --menu "Choose a channel:" \
        $BOXWIDTH $BOXHEIGHT $CONTENTHEIGHT \
        "${whiptail_opts[@]}" 3>&2 2>&1 1>&3 )
      [ "$?" != "0" ] && exit 0;
    else
      clear
      eval $(resize)
      repeat=$(( $COLUMNS - 21 ))
      echo -n "= AVAILABLE CHANNELS "
      for ch in $(seq $repeat); do echo -n "="; done
      echo -ne "\n"
      echo "" 
      PS3="
Choose a channel: "
      select CHANNEL in $chanlist
      do 
        [ "$CHANNEL" == "QUIT" ] && exit 0
        [ "$CHANNEL" != "" ] && break
      done
    fi  
    break
  done 
}

function starttime_dialog {
  while true
  do
    if $whiptail
    then
      set_ui_window_params 2
      STARTTIME=$(whiptail \
        --title "$TITLE" \
        --inputbox "\nStart recording at:" \
        $BOXWIDTH $BOXHEIGHT "$(date --rfc-3339=date) 20:15" \
        3>&2 2>&1 1>&3 )
      [ "$?" != "0" ] && exit 0;
    else
      echo -n "Start recording at: "
      read STARTTIME
    fi
    if date -d "$STARTTIME" > /dev/null 2>&1
    then
      if [ $(date -d "$STARTTIME" +%s) -lt $(date +%s) ]
      then
        if $whiptail 
        then
          whiptail --title "$TITLE" --msgbox \
            " The specified time:\n\n    ${STARTTIME}\n\nis already over." \
            $BOXWIDTH $BOXHEIGHT
        else
          echo -e "The specified time:\n    ${STARTTIME}\nis already over."  
        fi  
      else
        break
      fi
    else
      if $whiptail
      then
        whiptail --title "$TITLE" --msgbox \
          " The specified time:\n\n    ${STARTTIME}\n\ncould not be parsed." \
          $BOXWIDTH $BOXHEIGHT
      else
        echo -e "The specified time:\n    ${STARTTIME}\ncould not be parsed."
      fi
    fi
  done
}

function endtime_dialog {
  while true
  do
    if $whiptail
    then
      set_ui_window_params 2
      endtimeinit=$(( $(date -d "$STARTTIME" +%s) + 3600 ))
      ENDTIME=$(whiptail \
	--title "$TITLE" \
	--inputbox "\nStop recording at:" \
	$BOXWIDTH $BOXHEIGHT "$(date -d @${endtimeinit} '+%Y-%m-%d %H:%M')" \
	3>&2 2>&1 1>&3 )
      [ "$?" != "0" ] && exit 0;
    else
      echo -n "Stop recording at: "
      read ENDTIME
    fi
    if date -d "$ENDTIME" > /dev/null 2>&1
    then
      if [ $(date -d "$ENDTIME" +%s) -lt $(date -d "$STARTTIME" +%s) ]
      then
        if $whiptail
        then
	  whiptail --title "$TITLE" --msgbox \
	    " The specified time:\n\n    ${ENDTIME}\n\nis before start time ($STARTTIME)." \
	    $BOXWIDTH $BOXHEIGHT
         else
           echo -e "The specified time:\n    ${ENDTIME}\nis before start time ($STARTTIME)."
         fi
      else
        break
      fi
    else
      if $whiptail
      then
	whiptail --title "$TITLE" --msgbox \
	  " The specified time:\n\n    ${ENDTIME}\n\ncould not be parsed." \
	  $BOXWIDTH $BOXHEIGHT
      else
        echo -e "The specified time:\n    ${ENDTIME}\ncould not be parsed."
      fi
    fi
  done
}

function showname_dialog {
  while true
  do
    if $whiptail
    then
      set_ui_window_params 2
      shownameinit=$($showname && echo $SHOWNAME || echo $CHANNEL)
      SHOWNAME=$(whiptail \
	--title "$TITLE" \
	--inputbox "\nEnter the name of the show:" \
	$BOXWIDTH $BOXHEIGHT "$shownameinit" \
	3>&2 2>&1 1>&3 )
      [ "$?" != "0" ] && exit 0;
    else
      echo -n "Enter the name of the show: "
      read SHOWNAME
    fi
    showname=true
    [ "$SHOWNAME" = "" ] || break
  done
}

function recordpath_dialog {
  while true
  do
    if $whiptail
    then
      set_ui_window_params 2
      RECORDPATH=$(whiptail \
	--title "$TITLE" \
	--inputbox "\nSpecify a directory to save the recording:" \
	$BOXWIDTH $BOXHEIGHT "$RECORDPATH" \
	3>&2 2>&1 1>&3 )
      [ "$?" != "0" ] && exit 0;
    else
      echo "Specify a directory to save the recording"
      echo "(default: $RECORDPATH)"
      echo -n ":"
      read RECORDPATHINPUT
      [ "$RECORDPATHINPUT" != "" ] && RECORDPATH=$RECORDPATHINPUT
    fi
    if [ ! -d "$RECORDPATH" ] 
    then
      if $whiptail
      then
	whiptail --title "$TITLE" --msgbox \
	  " The specified directory:\n\n    ${RECORDPATH}\n\ndoes not exist." \
	  $BOXWIDTH $BOXHEIGHT
      else
        echo -e "The specified directory:\n    ${RECORDPATH}\ndoes not exist."
      fi
    elif [ ! -w "$RECORDPATH" ]
    then
      if $whiptail
      then
	whiptail --title "$TITLE" --msgbox \
	  " You don't have permission to write to:\n\n    ${RECORDPATH}\n\n" \
	  $BOXWIDTH $BOXHEIGHT
      else
        echo -e "You don't have permission to write to:\n    ${RECORDPATH}\n"
      fi
    else
      break
    fi
  done
}

function confirm_dialog {
  summary="Scheduled for recording:

Start time:    $(date -d "${STARTTIME}" "+%a, %F %H:%M")
End time:      $(date -d "${ENDTIME}" "+%a, %F %H:%M")
Channel:       ${CHANNEL}
Show:          ${SHOWNAME}
Directory:     ${RECORDPATH}

Are those settings correct?"
  if $whiptail
  then
    set_ui_window_params 2
    answer=$(whiptail --title "$TITLE" --yesno \
      "$summary" $BOXWIDTH $BOXHEIGHT 3>&2 2>&1 1>&3 )
 else
   echo -n "$summary (Y/n): "
   read answerinput
   answer=$([ "$answerinput" == "y" ] || [ "$answerinput" == "" ] && echo 0 || echo 1)
 fi
 return $answer
}

# record option check
function require_r_opt {
  # ARGS:
  # 1: option name
  if $record
  then
    return 0
  else
    printerr "The option '--${1}' requires the '--record' option"
    exit 1
  fi
}

function write_to_crontab {
  # when using this function make sure that
  # the necessary vars are set
  # mandatory: CHANNEL, STARTTIME, DURATION
  local CRONTEMPFILE="${TMPPATH}/crontab.tmp"
  DELETEME=${RANDOM}${RANDOM}
  crontab -l > /dev/null 2>&1 && crontab -l > $CRONTEMPFILE || touch $CRONTEMPFILE
  echo -ne "$(date -d "$STARTTIME" +"%M %H %d %m") *\t$(readlink -f ${0} || basename ${0}) --record " >> $CRONTEMPFILE
  echo -ne "--quiet --channel '${CHANNEL}' --duration ${DURATION} " >> $CRONTEMPFILE
  echo -ne "--deleteme ${DELETEME} " >> $CRONTEMPFILE
  $showname && echo -ne "--showname '${SHOWNAME}' " >> $CRONTEMPFILE
  echo -ne "--path '${RECORDPATH}'\n" >> $CRONTEMPFILE
  crontab < $CRONTEMPFILE
  rm $CRONTEMPFILE
}

function fetch_url {
  # download url and print it to stdout, exit on failure
  # ARG1: URL
  local url="$1"
  local errormsg="could not download: $url"
  curl -fs "$url" \
    || { printerr "$errormsg"; return 1; }
  return 0
}

function hls_get_current_segment {
  # retrieve current segment of given stream variant.
  # the provided URL is expexted to be a valid index file
  # of a stream variant. the index number is printed
  # to stdout
  # ARG1: URL of stream variant index

  # get data
  local indexurl="$1"
  local raw
  raw="$(fetch_url "$indexurl")" || return 1;

  # validate data
  # check EXTM3U tag
  echo "$raw" | head -n1 | grep '^#EXTM3U$' > /dev/null \
    || { printerr "not a valid playlist file"; return 1; }
  # extract current segment
  local current_segment="$(echo "$raw" | \
    sed '/#EXT-X-MEDIA-SEQUENCE/!d;
         /#EXT-X-MEDIA-SEQUENCE/s/#EXT-X-MEDIA-SEQUENCE://')"
  # validate segment
  [[ $current_segment =~ ^-?[0-9]+$ ]] \
    || { printerr "could not extract current segment number"; return 1; }

  # return result
  echo "$current_segment"
  return 0
}

function hls_get_segment_of_time {
  # find segment from given time
  # ARG1: url of stream variant
  # ARG2: time (as understood by 'date')
  local indexurl="$1"
  local time_given="$2"
  local baseurl="$(dirname "$indexurl")"
  local ext="ts"

  # get current segment
  local segment_now
  segment_now=$(hls_get_current_segment "$1") || return 1
  segment_now=$((segment_now + 3))

  # set time
  local time_now=$(date +%s)
  local time_then=$(date +%s -d "$time_given")

  # deltas
  local time_delta=$((time_now - time_then))
  local segment_delta=$(((time_delta + 4) / 4))
  local segment_then=$((segment_now - segment_delta))

  # check if segment_then is available (only if it's from the past)
  if [ "$time_then" -lt "$time_now" ]
  then
    curl -sf -I -X HEAD "${baseurl}/${segment_then}.${ext}" > /dev/null \
      || { printerr "requested time is too far in the past: $time_given"; return 1; }
  fi

  # return result
  echo "$segment_then"
  return 0
}

function hls_extract_variants {
  # creates an array HLS_VARIANTS with 'bitrate url' values
  # ARG1: url of master playlist
  local master_url="$1"
  unset HLS_VARIANTS

  # get data
  local raw
  raw="$(fetch_url "$master_url")" || return 1

  # verify data
  echo "$raw" | head -n1 | grep '^#EXTM3U$' > /dev/null \
    || { printerr "not a valid playlist file"; return 1; }

  # create array HLS_VARIANTS
  eval $(\
    echo "$raw" | \
    sed -n '/#EXTM3U/d;/^#EXT-X-STREAM-INF/{s/.*,BANDWIDTH=//};N;s/\n/ /;P' | \
    sort -n | \
    sed '=' | \
    sed -n 'N;s/\n/ /;s/^/HLS_VARIANTS[/;s/ /]="/;s/$/"/;P')

  # verify array
  if [ "${#HLS_VARIANTS[@]}" -eq "0" ]
  then
    printerr "could not extract variants from master playlist"
    return 1
  fi
  return 0
}

function hls_select_variant_url {
  # print url of selected variant
  # ARG1: index of variant
  local index="$1"
  local count=${#HLS_VARIANTS[@]}

  # do we have variants?
  if [ "$count" -eq "0" ]
  then
    printerr "no variants found"
    return 1
  fi

  # validate given index
  if [ "$index" -gt "$count" ] || [ "$index" -lt "1" ]
  then
    printerr "selected variant not in range 1 to $count"
    return 1
  fi

  # return result
  echo "${HLS_VARIANTS[$index]}" | cut -d" " -f2
  return 0
}

function hls_select_variant_bitrate {
  # print bitrate of selected variant
  # ARG1: index of variant
  local index="$1"
  local count=${#HLS_VARIANTS[@]}

  # do we have variants?
  if [ "$count" -eq "0" ]
  then
    printerr "no variants found"
    return 1
  fi

  # validate given index
  if [ "$index" -gt "$count" ] || [ "$index" -lt "1" ]
  then
    printerr "selected variant not in range 1 to $count"
    return 1
  fi

  # return result
  echo "${HLS_VARIANTS[$index]}" | cut -d" " -f1
  return 0
}

function hls_download_variant {
  # download given stream variant to file, starting from given time
  # ARG1: url of stream variant
  # ARG2: file to write stream into
  # ARG3: start time (as understood by 'date') [optional]
  # ARG4: end time [optional]
  local url="$1"
  local url_base="$(dirname "$url")"
  local file="$2"
  [ -z "$3" ] && local time_start="now" || local time_start="$3"
  # if no time_stop is given, default it to 6 hours after time_start
  local time_stop_default="@$(( $(date +%s -d"$time_start") + 21600))"
  [ -z "$4" ] && local time_stop="$time_stop_default" || local time_stop="$4"
  local ext="ts"

  # check if time_stop is after time_start
  if [ "$(date +%s -d"$time_stop")" -le "$(date +%s -d"$time_start")" ]
  then
    printerr "given stop time is before start time"
    return 1
  fi

  # get start and stop segment
  local segment
  segment=$(hls_get_segment_of_time "$url" "$time_start") || return 1
  local segment_stop
  segment_stop=$(hls_get_segment_of_time "$url" "$time_stop") || return 1

  # get ref time and ref segment
  # to make sure not to download from the future
  local segment_current=$(hls_get_current_segment "$url")
  local segment_ref=$((segment_current + 3))
  local time_ref=$(date +%s)

  # now do it
  local sleep=0
  > "$file" 2> /dev/null \
    || { printerr "cannot create file: $file"; return 1; }
  while sleep $sleep
  do
    curl -fs "${url_base}/${segment}.${ext}" >> "$file" || \
      echo "segment $segment not available" 1>&2
    [ "$segment" -lt "$segment_stop" ] || break
    local time_current=$(date +%s)
    local time_delta=$((time_current - time_ref))
    local segment_delta=$((segment - segment_ref))
    [ "$segment_delta" -gt "0" ] || segment_delta=0
    sleep=$(( 4 + (4 * segment_delta) - time_delta))
    [ "$sleep" -gt "0" ] || sleep=0
    ((segment+=1))
  done
}

######## DO STUFF ##################################################
# Set TELEBOY_USER and TELEBOY_PASS
set_credentials || exit 1

# Set TMPPATH
setup_work_dir || exit 1

# login
# Set TELEBOY_AUTHENTICATED=true
if ! teleboy_login $TELEBOY_USER $TELEBOY_PASS
then
  printerr "Please check your credentials in the configuration:"
  printerr "$CONFIG"
  exit 1
fi

# Set TELEBOY_SESSION_ID
teleboy_set_session_id || exit 1

# Set TELEBOY_USER_ID, TELEBOY_USER_LOCALE
teleboy_create_user_env || exit 1

# Set CHANNELS (array) 
teleboy_create_channel_list || exit 1

# option -l|--list
if $list
then
  print_channel_list
  exit
fi

# Validate given options
# option -c|--channel
if $channel
then
  channel_validity "$CHANNEL" || exit 1
fi

# option -t|--starttime
# if 
if $starttime
then
  check_time_validity "$STARTTIME" || exit 1
fi

# option -e|--endtime
if $endtime
then
  check_time_validity "$ENDTIME" || exit 1
fi

# option -d|--duration
if $duration
then
  if ! [[ $DURATION =~ ^[0-9]+$ ]]
  then
    printerr "The specified duration '$DURATION' is not a number."
    exit 1
  fi
fi

# option -p|--path
if $path
then
  check_recordpath || exit 1
fi

# Loop for interactive mode
while true
do
  if $record
  then
    # if enough params are given, don't ask, just do it
    if $starttime && $endtime && $channel
    then
      check_start_before_end "$STARTTIME" "$ENDTIME" || exit 1
      player_recorder $CHANNEL || exit 1
      exit 0
    else
      while true
      do
        channel_dialog || exit 1
        starttime_dialog
        endtime_dialog
        showname_dialog
        recordpath_dialog
        confirm_dialog && break
      done
      # Write an entry to crontab, if start time is at least 60s in the future
      # Otherwise try to record immediately
      epochnow=$(date +s%)
      if [ $(date +%s -d "$STARTTIME") -gt $(( $epochnow + 60 )) ]
      then
        write_to_crontab
        set_ui_window_params 2
        if $whiptail
        then
          whiptail --title "$TITLE" --msgbox \
            " Successfully added crontab entry:\n\n
$(crontab -l | grep $DELETEME)" \
            $BOXWIDTH $BOXHEIGHT
        else
          echo "Successfully added crontab entry:"
          crontab -l | grep $DELETEME
        fi
        exit 0
      else
        player_recorder "$CHANNEL" || exit 1
        exit 0
      fi
    fi
  else
    $channel || channel_dialog || exit 0
    $starttime || STARTTIME="now"
    $duration && ENDTIME="@$(( $(date +%s -d "$STARTTIME") + $DURATION ))"
    $endtime || ENDTIME="@$(( $(date +%s -d "$STARTTIME") + 14400 ))"
    check_start_before_end "$STARTTIME" "$ENDTIME" || exit 1
    player_recorder $CHANNEL || sleep 2
    $channel && break
  fi
done

exit 0
