#!/bin/bash
################################################
# Bash script for watching/recording online TV 
# streams from teleboy.ch without browser and 
# =no f*** flash=.
#
# License:  GNU GPL v2
# Author:   Alexander Tuchacek
# written:  2011-05-21
# modified by: Roman Haefeli
# modified on: 2011-06-08
# program version  1.1~unreleased
################################################

VERSION="1.1~unreleased"

# Set some default variables
TMPPATH=/tmp/watchteleboy
UAGENT='Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.2.17) Gecko/20110422 Ubuntu/10.04 (lucid) Firefox/3.6.17'
MPLAYEROPTS="-really-quiet"
RECORDPATH=$(pwd)

# Channel list
CHANNELS="
ard 111.stream
zdf 101.stream
arte 1611.stream
3sat 141.stream
sf1 11.stream
sf1_o 1591.stream
sf2 81.stream
sfinfo 241.stream
orf1 91.stream
orf2 291.stream
zdfneo 121.stream
atv 211.stream
ntv 401.stream
euronews 2161.stream
phoenix 531.stream
sport1 331.stream
eurosport 391.stream
swr 541.stream
mdr 511.stream
ndr 521.stream
wdr 301.stream
rtl 51.stream
rtl2 321.stream
superrtl 351.stream
vox 131.stream
pro7 61.stream
sat1 71.stream
kabel1 311.stream
dasvierte 1721.stream
dmax 151.stream
3plus 1701.stream
telezueri 1971.stream
nickelodeon 221.stream
deluxe 1921.stream
viva 171.stream
joiz 5011.stream
"
# Default channel
CH="3sat"

# Check dependencies
programlist="rtmpdump mplayer wget grep cut crontab date"
for program in $programlist
do
    if ! which $program > /dev/null
    then
        echo "ERROR:" 1>&2
        echo "Could not find ${program}. Is it installed?" 1>&2
        exit 1
    fi
done

# Read config (overrides default values)
CONFIG=~/.watchteleboyrc
if [ -f $CONFIG ]
then
  . $CONFIG
fi

# Comandline argument parsing
channel=false
deleteme=false
duration=false
endtime=false
help=false
list=false
path=false
record=false
showname=false
starttime=false
version=false
while [ $# -gt 0 ]
do
  case "$1" in
    -c|--channel) channel=true; CH=$2; shift;;
    -d|--duration) duration=true; DURATION="$2"; shift;;
    -e|--endtime) endtime=true; ENDTIME="$2"; shift;;
    -h|--help) help=true;;
    -l|--list) list=true;;
    -n|--showname) showname=true; SHOWNAME="$2"; shift;;
    -p|--path) path=true; RECORDPATH="$2"; shift;;
    -r|--record) record=true;;
    -t|--starttime) starttime=true; STARTTIME="$2"; shift;;
    -v|--version) version=true;;
    --deleteme) deleteme=true; DELETEME="$2"; shift;;
    -*) echo "$(basename $0): error - unrecognized option '$1'" 1>&2
        echo "use '$(basename $0) --help' to get a list of available options"
        exit 1;;
    *)  break;;
  esac
  shift
done

# option -v|--version
if $version
then
  echo "watchteleboy $VERSION"
  echo "written by Alexander Tuchacek & Roman Haefeli"
  echo "Licensed under the GNU Public License 2.0 (GPL-2)"
  exit
fi

# option -l|--list
if $list
then
  echo "$CHANNELS" | cut -d " " -f 1 
  exit
fi

# option -h|--help
if $help
then
  cat << EOF

watchteleboy
------------

  <no options>            go into interactive mode

GENERAL OPTIONS:

  -c|--channel CHANNEL    specify a channel
  -h|--help               show this help and exit
  -l|--list               print a list of all channels and exit
  -v|--version            print the version of this program

OPTIONS FOR RECORDING (require -r|--record):

  -e|--endtime TIME       schedule the end time of the recording
  -d|--duration SECONDS	  specify the duration of the recording
  -n|--showname SHOWNAME  specify file name prefix
  -p|--path DIR		  specify target directory
  -r|--record             record a stream instead of watching it
  -t|--starttime TIME	  schedule the start time for a recording

EOF
  exit
fi

# Check record path validity
if $record
then
  if [ ! -d "$RECORDPATH" ]
  then
    echo "There is no such directory: $RECORDPATH" 1>&2
    exit 1
  elif [ ! -w "$RECORDPATH" ]
  then
    echo "You don't have permission to write to $RECORDPATH" 1>&2
    exit 1
  fi
fi

# Create TMPDIR if required
if  [ ! -d $TMPPATH ]
then
  mkdir -p $TMPPATH
fi

# get the session cookie
POST="login=${USER}&password=${PASS}&x=13&y=17&followup=%2Ftv%2Fplayer%2Fplayer.php"
URL="http://www.teleboy.ch/layer/rectv/free_live_tv.inc.php"
COOKIE=$(wget -U "$UAGENT" \
  --quiet \
  --no-check-certificate \
  --save-cookies /dev/stdout \
  --keep-session-cookies \
  --post-data $POST \
  -O $TMPPATH/step1.html \
  $URL)

# check if login was succesful
cat $TMPPATH/step1.html | grep "Falsche Eingaben" > /dev/null || \
cat $TMPPATH/step1.html | grep "<h1>Login f&uuml;r Member</h1>" > /dev/null
if [ $? -eq 0 ]
then
  echo "login failed!!!!" 1>&2
  exit 1
else
  echo "login ok..." 
fi

# get flashplayer url
SWFFILE=$(wget \
  -O - \
  --quiet \
  "http://www.teleboy.ch/tv/player/player.php" | \
  grep "nelloplayer" | \
  cut -d'"' -f2)

# Da Time Valeditee Checkah
function check_time_validity {
  # ARGS:
  # 1: datetime string
  if ! date -d "$1" > /dev/null
  then
    echo "Could not understand time format." 1>&2
    exit 1
  fi
}

function compose_rtmp_command {
  # ARGS:
  # 1: channel
  # 2: output file
  URLBASE="http://www.teleboy.ch/tv/player"
  POST="cmd=getLiveChannelParams&cid=14&cid2=0"
  STREAMINFO=$(wget -U "$UAGENT" \
    --quiet \
    --referer "${URLBASE}/player.php" \
    --load-cookies <(echo "$COOKIE") \
    --post-data $POST \
    --keep-session-cookies \
    --output-document /dev/stdout \
    "${URLBASE}/includes/ajax.php")

  # get rtmp parameters
  ch=$(echo "$STREAMINFO" | cut -d "|" -f1)
  app=$(echo "$STREAMINFO"  | cut -d "|" -f2)
  c1=$(echo "$STREAMINFO"  | cut -d "|" -f3)
  c2=$(echo "$STREAMINFO"  | cut -d "|" -f4)
  c3=$(echo "$STREAMINFO"  | cut -d "|" -f5)
  c4=$(echo "$STREAMINFO"  | cut -d "|" -f6)
  c5=$(echo "$STREAMINFO"  | cut -d "|" -f7)
  c6=$(echo "$STREAMINFO"  | cut -d "|" -f8)
  playpath=$(echo "$CHANNELS" | grep "^$1" | head -n1 | cut -d " " -f 2)

  # rtmpdump command
  RTMP="rtmpdump 
    -r rtmp://62.65.136.20/nellotv 
    -a $app 
    -f LNX 10,3,181,14 
    -W ${URLBASE}/${SWFFILE} 
    -p ${URLBASE}/player.php 
    -C S:$c1 -C S:$c2 -C S:$c3 -C S:$c4 
    -C S:$c5 
    -C S:$c6 
    -y $playpath 
    -q 
    -o $2 "
}

# test channel input validity
function chan_validity {
  # ARGS:
  # 1: channel
  echo $CHANNELS | grep $1 > /dev/null
}

# channel selector
function chanselectah {
  while true
  do
    echo -e "\nCHANNELS:"
    echo "$CHANNELS" | cut -d " " -f 1 | tr "\n" " "
    echo ""
    read -p "TV Channel (default is $CH): " -e SEL
    if [ -n "$SEL" ]
    then
      chan_validity $SEL && \
        CH="$SEL" && \
        break
      echo "Channel '$SEL' is not available..." 
      sleep 1
    fi
  done 
}

# option -t|--starttime
crontempfile="/tmp/crontab.${USER}.watchteleboy"
if $starttime && $record
then
  if $endtime || $duration
  then
    check_time_validity "$STARTTIME"
    starttimeepoch=$(date -d "$STARTTIME" +%s)
    if [ $starttimeepoch -lt $(date +%s) ]
    then
      echo "The specified start time is already over." 1>&2
      exit 1
    fi
    if $endtime
    then
      check_time_validity "$ENDTIME"
      endtimeepoch=$(date -d "$ENDTIME" +%s)
      if [ $endtimeepoch -lt $starttimeepoch ]
      then
        echo "The specified end time is before the start time." 1>&2
        exit 1
      fi
      let DURATION=$endtimeepoch-$starttimeepoch
    elif $duration
    then
      if ! [ "$DURATION" -ge 0 ] 2>&-
      then
        echo "The specified duration '$DURATION' is not a number." 1>&2
        exit 1
      fi
    fi
    if $channel
    then
      if ! chan_validity $CH
      then
        echo "'$CH' is not a valid channel." 1>&2
        echo "Use '--list' to display available channels." 1>&2
        exit 1
      fi
    else
      echo "You need to specify a channel with '--channel'" 1>&2
      exit 1
    fi
    # Now we have validated all required parameters
    echo "Scheduled for recording:"
    echo -e "Start time:\t$(date -d "$STARTTIME" "+%a, %F %H:%M")"
    $endtime && echo -e "End time:\t$(date -d "$ENDTIME" "+%a, %F %H:%M")"
    $duration && echo -e "Duration:\t${DURATION} sec"
    echo -e "Channel:\t$CH"
    echo -e "Directory:\t$RECORDPATH"
    $showname && echo -e "Show:\t\t$SHOWNAME"
    read -p "Are those settings correct? (Y/n) "
    if [ "$REPLY" == "n" ]
    then
      echo "Cancelled by user. Quit." 1>&2
      exit 1
    fi
    crontab -l > /dev/null 2>&1 && crontab -l > $crontempfile || touch $crontempfile
    echo -ne "$(date -d "$STARTTIME" +"%M %H %d %m") *\t${0} --record " >> $crontempfile
    echo -ne "--channel ${CH} --duration ${DURATION} " >> $crontempfile
    echo -ne "--deleteme ${RANDOM}${RANDOM} " >> $crontempfile
    $showname && echo -ne "--showname '${SHOWNAME}' " >> $crontempfile
    echo -ne "--path ${RECORDPATH}\n" >> $crontempfile
    crontab < $crontempfile
    rm $crontempfile
    echo "Done."
    exit 0
  else 
    echo "You must specify either --duration or --endtime" 1>&2
    exit 1
  fi
elif $starttime
then
  echo "The '--starttime' option requires the '--record' option" 1>&2
  exit 1
fi

# option --deleteme
if $deleteme
then
  crontab -l > $crontempfile
  sed -i "/$DELETEME/ d" $crontempfile
  crontab < $crontempfile
  rm $crontempfile
fi

# Compose mplayer command
MPLAYER="mplayer $MPLAYEROPTS - "

# Compose rmtpdump output filename
function compose_outfile {
  # ARGS:
  # 1: Channel
  if $record
  then
    if $showname
    then
      OUTFILE=${RECORDPATH}/${SHOWNAME}_$(date +%Y%m%d%H%M).flv
    else
      OUTFILE=${RECORDPATH}/${1}_$(date +%Y%m%d%H%M).flv
    fi
  else
    OUTFILE="-"
  fi
} 

function player_recorder {
  # ARGS:
  # 1: Channel
  compose_outfile $1
  compose_rtmp_command $1 $OUTFILE
  if $record
  then
    $RTMP &
    PID=$!
  else
    $RTMP | $MPLAYER 2> /dev/null
  fi
}

# Da Keestroke Waitah
function  waitskey {
  echo "Press the 's' key to stop the recording." 
  while [ "$keypress" != "s" ]
  do
    read -s -n1  keypress
  done
}

# option -e|--endtime
if $endtime && ! $duration
then
  check_time_validity "$ENDTIME"
  endtimeepoch=$(date -d "$ENDTIME" +%s)
  nowepoch=$(date +%s)
  if [ $endtimeepoch -lt $nowepoch ]
  then
    echo "The specified end time is already over." 1>&2
    exit 1
  fi
  let DURATION=${endtimeepoch}-${nowepoch}
  duration=true
fi

# option -d|--duration
if $duration && $record
then
  if ! [ "$DURATION" -ge 0 ] 2>&-
  then
    echo "The specified duration '$DURATION' is not a number." 1>&2
    exit 1
  fi
  if chan_validity $CH
  then
    player_recorder $CH
    echo "Now recording $CH for $DURATION seconds."
    sleep $DURATION
    kill $PID
    echo "Stopped recording."
    exit
  else
    echo "'$CH' is not a valid channel." 1>&2
    echo "Use '--list' to display available channels." 1>&2
    exit 1
  fi
elif $duration
then
  echo "The '--duration' option requires the '--record' option" 1>&2
  exit 1
fi

# option -c|--channel
if $channel
then
  if chan_validity $CH
  then
    if $record
    then
      player_recorder $CH
      echo "Now recording ${CH}..."
      waitskey
      kill $PID
      echo "Stopped recording."
      exit 0
    else
      echo "Now playing ${CH}..."
      player_recorder $CH
    fi
    exit 0
  else
    echo "Channel '$CH' is not available..." 1>&2
    exit 1
  fi
fi

# Loop for interactive mode
while true
do
  chanselectah
  echo "Now playing ${CH}..."
  player_recorder $CH
done

exit 0

