#!/bin/bash -i
################################################
# Bash script for watching/recording online TV 
# streams from teleboy.ch without browser and 
# =no adobe flashplayer=.
#
# License:  GnuGPL v2
# Authors:   
#   2011-2016   Roman Haefeli
#   2012        Doma Smoljo
#   2011        Alexander Tuchaček 
# 
# program version: (check below)
################################################

VERSION=1.20

# Set some default values
TMPDIR=/tmp
UAGENT='Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:12.0) Gecko/20100101 Firefox/12.0'
MPLAYEROPTS="-really-quiet"
MPVOPTS="--really-quiet --keep-open"
RECORDPATH=$(pwd)
LIVEPAUSE=true
BUFFERSECONDS=5
SCRIPTNAME=$(basename $0)

function printerr {
  # print error message to stderr
  # ARG1: error message
  $quiet || echo "$1" >&2
  return 0
}

# Comandline argument parsing
channel=false
deletecron=false
deleteme=false
duration=false
endtime=false
help=false
list=false
path=false
quiet=false
record=false
showname=false
starttime=false
version=false
while [ $# -gt 0 ]
do
  case "$1" in
    -b|--live) LIVEPAUSE=$2; shift;;
    -c|--channel) channel=true; CHANNEL=$2; shift;;
    -d|--duration) duration=true; DURATION="$2"; shift;;
    -e|--endtime) endtime=true; ENDTIME="$2"; shift;;
    -h|--help) help=true;;
    -l|--list) list=true;;
    -n|--showname) showname=true; SHOWNAME="$2"; shift;;
    -m|--mplayer-opts) mplayeropts=true; MPLAYEROPTS="$2"; shift;;
    -p|--path) path=true; RECORDPATH="$2"; shift;;
    -q|--quiet) quiet=true;;
    -r|--record) record=true;;
    -t|--starttime) starttime=true; STARTTIME="$2"; shift;;
    -v|--version) version=true;;
    --deleteme) deleteme=true; DELETEME="$2"; shift;;
    --delete-cron) deletecron=true; DELCHAN="$2"; DELTIME="$3"; shift; shift;;
    -*) printerr "$SCRIPTNAME: error - unrecognized option '$1'"
        printerr "use '$SCRIPTNAME --help' to get a list of available options"
        exit 1;;
    *)  break;;
  esac
  shift
done

# option -v|--version
if $version
then
  echo "$SCRIPTNAME $VERSION"
  echo "Authors:   
  2011-2016   Roman Haefeli
  2012        Doma Smoljo
  2011        Alexander Tuchaček"
  echo "Licensed under the GNU Public License 2.0 (GPL-2)"
  exit
fi

# option -h|--help
if $help
then
  cat << EOF

$SCRIPTNAME
------------

  <no options>                go into interactive mode

GENERAL OPTIONS:

  -c|--channel CHANNEL        specify a channel
  --delete-cron CHANNEL TIME  delete a previously scheduled job
  -h|--help                   show this help and exit
  -l|--list                   print a list of all channels and exit
  -q|--quiet                  suppress any output and do not ask
  -v|--version                print the version of this program

WATCHING OPTIONS:

  -b|--livepause true|false   turn live pausing (buffering) on/off

RECORDING OPTIONS (require -r|--record):

  -e|--endtime TIME           schedule the end time of the recording
  -d|--duration SECONDS	      specify the duration of the recording
  -n|--showname SHOWNAME      specify file name prefix
  -p|--path DIR		      specify target directory
  -r|--record                 record a stream instead of watching it
  -t|--starttime TIME	      schedule the start time for a recording

EOF
  exit
fi

# delete cron entry (used by tvbrowser record plugin)
if $deletecron
then
  if ! date -d "$DELTIME" > /dev/null 2>&1
  then
    printerr "Could not parse specified time: $DELTIME"
    exit 1
  fi
  crontempfile="/tmp/crontab.tmp"
  searchstring="$(date -d "$DELTIME" +"^%M[[:space:]]%H[[:space:]]%d[[:space:]]%m").*${SCRIPTNAME}.*channel[[:space:]]'${DELCHAN}'.*"
  if ! crontab -l | grep "$searchstring" > /dev/null
  then
    printerr "Could not find specified job in crontab."
    exit 1
  else
    crontab -l | grep -v "$searchstring" > $crontempfile 
    crontab < $crontempfile
    rm $crontempfile
    $quiet || echo "Successfully deleted crontab entry."
    exit 0
  fi
fi

# Check record path validity
if $record
then
  if [ ! -d "$RECORDPATH" ]
  then
    printerr "There is no such directory: $RECORDPATH"
    exit 1
  elif [ ! -w "$RECORDPATH" ]
  then
    printerr "You don't have permission to write to $RECORDPATH"
    exit 1
  fi
fi

# Check dependencies
programlist="crontab curl grep jq sed"
for program in $programlist
do
    if ! which $program > /dev/null
    then
        printerr "Could not find ${program}. Is it installed?"
        exit 1
    fi
done

# Check player dependency (mpv, mplayer in that order)
if which mpv > /dev/null
then
  PLAYER=mpv
elif which mplayer > /dev/null
then
  PLAYER=mplayer
else
  printerr "No suitable player found: mpv, mplayer"
  printerr "Please install mpv or mplayer, before using"
  printerr "this script."
  exit 1
fi

# whiptail dialog boxes are optional (fallback to tradition shell dialogs)
whiptail=$(which whiptail > /dev/null && echo true || echo false)

# Read config (overrides default values) or create it
CONFIG="$HOME/.${SCRIPTNAME}rc"
if [ -f $CONFIG ]
then
  . $CONFIG
else
  cat << EOF > $CONFIG
##########################################################################
# CONFIGURATION FILE FOR $SCRIPTNAME                                     #
# Feel free to adapt to your needs                                       #
##########################################################################


# Set directory where played streams are cached:

TMPDIR='$TMPDIR'

# $SCRIPTNAME allows you to use either mpv or mplayer. Since both
# players are not fully compatible, use separate configurations
# for each player.
# mpv flags:

MPVOPTS='$MPVOPTS'

# mplayer flags:

MPLAYEROPTS='$MPLAYEROPTS'

# Where should stream recordings be saved?
# This can be overridden by the -p/--path flag:

#RECORDPATH='~/mytvshows'

# This parameter turns live stream buffering on/off. When turned on,
# you can pause while watching and continue playback anytime later. Also,
# it enables you to seek back and forth within the downloaded buffer. This
# comes at the cost of longer delays when switching channels.
# Allowed values: true, false:

LIVEPAUSE='$LIVEPAUSE'

# How much data should be downloaded before starting playback?
# The value is given in seconds. The playback begins after
# BUFFERSECONDS * BITRATE data has been downloaded.
# This parameter has only effect when LIVEPAUSE is set to true:

BUFFERSECONDS='$BUFFERSECONDS'
EOF
  echo "created config file '$CONFIG'"
fi

# set working directory for keeping session data
TMPPATH="${TMPDIR}/${SCRIPTNAME}/${TELEBOY_USER}"

# Create TMPDIR 
if  [ ! -d $TMPPATH ]
then
  if ! mkdir -p $TMPPATH
  then
    printerr "Could not create directory: $TMPPATH"
    exit 1
  fi
  chmod 777 "${TMPDIR}/${SCRIPTNAME}"
fi

# remove TMPPATH dir on exit
function cleanup {
  # Delete livestream cache
  # (but _not_ our recording!)
  $record || rm -f "$OUTFILE"
  $quiet || echo ""
}
trap cleanup INT TERM EXIT

# Teleboy Login
function teleboy_login {
  # get the session cookie (cinergy_s) and set TELEBOY_SESSION_ID then login to
  # get auth cookie (cinergy_auth).
  # this seems to be a two-step process, since we need to already have
  # a session cookie before we can attempt a login. It is sufficient to
  # visit any teleboy page to get a session cookie.
  # ARG1: teleboy user name
  # ARG2: teleboy password
  local USER=$1
  local PASS=$2
  if [ -f "$TMPPATH/cookie1" ]
  then
    # When does the current session expire (make it artificially a minute early
    session_expires=$(( $(sed '/cinergy_s/!d;s/^.*\s\(.*\)\s.*\.*\s.*$/\1/' $TMPPATH/cookie1) - 60 ))
    now=$(date +%s)
    if [ "$session_expires" -gt "$now" ] && grep -q cinergy_auth $TMPPATH/cookie1
    then
      $quiet || echo "Already logged in as $USER"
      NEW_SESSION=false
      return 0
    fi
  fi
  $quiet || echo -n "login (as '$USER')..."
  local URL="http://www.teleboy.ch/"
  curl --user-agent "$UAGENT" \
    --silent \
    --fail \
    --cookie-jar $TMPPATH/cookie0 \
    --output /dev/null \
    "$URL" || { printerr "error"; return 1; }
  local POST="login=${USER}&password=${PASS}&keep_login=1"
  local URL="http://www.teleboy.ch/login_check"
  curl --user-agent "$UAGENT" \
    --silent \
    --fail \
    --cookie $TMPPATH/cookie0 \
    --cookie-jar $TMPPATH/cookie1 \
    --data $POST \
    --output /dev/null \
    "$URL" || { printerr "could not login"; return 1; }
  
  # Store value of session cookie (cinergy_s)
  # We only need to do that once per session and every stream request
  TELEBOY_SESSION_ID="$(sed '/cinergy_s/!d;/cinergy_s/s/^.*cinergy_s\s//' $TMPPATH/cookie1)"
  if [ "$TELEBOY_SESSION_ID" == "" ]
  then
    printerr "Could not retrieve session cookie (cinergy_s)"
    return 1
  fi

  # Check if login was successfull
  if grep -q cinergy_auth $TMPPATH/cookie1
  then
    $quiet || echo "ok"
    NEW_SESSION=true
    return 0
  else
    $quiet || echo "failed"
    rm $TMPPATH/cookie1
    return 1
  fi
}

# Add login credentials to config (if necessary)
if [ -z "$TELEBOY_USER" ]
then
  echo "Please provide your Teleboy credentials. If you don't have"
  echo "any, you can create a free account on http://www.teleboy.ch"
  read -p    "Please enter your user name: " TELEBOY_USER
  read -s -p "Please enter your password:  " TELEBOY_PASS
  echo
  while ! teleboy_login $TELEBOY_USER $TELEBOY_PASS 
  do
    read -p    "Please re-enter your user name: " TELEBOY_USER
    read -s -p "Please re-enter your password:  " TELEBOY_PASS
    echo
  done  
  echo "CAUTION: writing plain text password to the config file!"
  read -p "Proceed? y/N " -n 1 install_configuration
  echo
  if ! [[ "$install_configuration" =~ [Yy] ]]
  then
    echo "Not saving credentials in config file"
  else
      cat << EOF >> $CONFIG

# Teleboy Login Credentials

TELEBOY_USER='$TELEBOY_USER'
TELEBOY_PASS='$TELEBOY_PASS'
EOF
  fi
else
  if ! teleboy_login $TELEBOY_USER $TELEBOY_PASS
  then
    $quiet || echo "Please check your credentials in the configuration:"
    $quiet || echo "$CONFIG"
    exit 1
  fi
fi

function teleboy_create_user_env {
  # Set some variables that are required for accessing the teleboy api.
  # no arguments are taken, but login must have happened (we need the cookie).

  # It seems that key is hard-coded, thus it didn't appear
  # necessary to retrieve its value from the web
  TELEBOY_API_KEY=$(base64 -d <(echo "ZjBlN2JkZmI4MjJmYTg4YzBjN2ExM2Y3NTJhN2U4ZDVjMzc1N2ExM2Y3NTdhMTNmOWMwYzdhMTNmN2RmYjgyMg=="))
  
  # get user id, locale, plus member status
  local url="http://www.teleboy.ch/tv/player/player.php"
  local rawuserdata
  rawuserdata=$(curl \
    --user-agent "$UAGENT" \
    --silent \
    --fail \
    --cookie $TMPPATH/cookie1 \
    --output - \
    "$url") || { printerr "could not get page containing user id"; exit 1; }
  TELEBOY_USER_ID=$(llocal=$(echo "$rawuserdata" | grep " id: " | head -n1); printf "%s\n" "${llocal//[![:digit:]]/}")
  TELEBOY_USER_LOCALE=$(echo "$rawuserdata" | grep " locale: "| cut -d"'" -f2)
  TELEBOY_USER_PLUS=$(llocal=$(echo "$rawuserdata" | grep " plusMember: "); printf "%s\n" "${llocal//[![:digit:]]/}")
  
  # did we get a valid userid?
  if ! [[ "$TELEBOY_USER_ID" =~ ^-?[0-9]+$ ]]
  then 
    printerr "Could not extract a valid user id"
    exit 1
  fi
} 

# get the channel list
# CHANNELS is an array containing an element per station
# Each element follows this format:
# STATIONNAME/STATIONID
channel_list_file="$TMPPATH/channel_list"
if [ -f "$channel_list_file" ] && ! $NEW_SESSION
then
  CHANNELS=($(cat $channel_list_file))
else
  $quiet || echo -n "receiving channel list..."
  URL="http://tv.api.teleboy.ch/users/$tb_userid/broadcasts/now?expand=station&stream=true"
  stationlist_json="$(curl \
      --silent \
      --fail \
      --header "x-teleboy-apikey: $tb_apikey" \
      --header "x-teleboy-session: $TELEBOY_SESSION_ID" \
      --output - \
      "$URL")" || { printerr "could not download channel list"; exit 1; }
  CHANNELS=($(echo "$stationlist_json" | \
      jq -M '.data.items[] | {(.station.label): .station.id}' | \
      sed '/^  /!d;s/^  "//;s/": /\//'))
  # Check if we received something
  if [ ${#CHANNELS[@]} -gt 0 ]
  then
    $quiet || echo "ok (${#CHANNELS[@]} channels)"
    echo "${CHANNELS[@]}" > "$channel_list_file"
  else
    $quiet || echo "failed"
     exit 1
  fi
fi

# Convert selected channel to station_id (sid)
function set_sid_by_channel {
  # ARGS:
  # 1: CHANNEL
  sid=$(
    for channel in ${CHANNELS[@]}
    do
      echo $channel | grep -i ^$1/ | cut -d'/' -f2
    done
  )
  if [[ $sid = *[!0-9]* || "$sid" = "" ]] 
  then
    $quiet || echo -e "\nCould not get a valid sid." 1>&2
    exit 1
  fi
}

# Get stream-URL from teleboy-api by providing user, session, sid
function set_stream_data_from_api {
  # The following variables need to be set
  # tb_userid  (numeric user id)
  # tb_apikey
  # cinergy_s (session cookie)
  # ARG1: channel
  local channel=$1
  set_sid_by_channel $channel
  URL="http://tv.api.teleboy.ch/users/${tb_userid}/stream/live/${sid}?alternative=false"
  local stream_data_json
  stream_data_json="$(curl \
    --silent \
    --fail \
    --header "x-teleboy-apikey: ${tb_apikey}" \
    --header "x-teleboy-session: ${TELEBOY_SESSION_ID}" \
    --output - \
    "$URL")" || { printerr "API request failed"; return 1; }
  # local stream_data_url
  stream_data_url="$(echo "$stream_data_json" | \
    jq --raw-output '.data.stream.url')"
  # local stream_data_channelname
  stream_data_channelname="$(echo "$stream_data_json" | \
    jq --raw-output '.data.epg.current.station.name')"
}

# option -l|--list
function print_channel_list {
  for channel in "${CHANNELS[@]}"
  do
    echo $channel | cut -d'/' -f1
  done
}
if $list
then
  print_channel_list
  exit
fi

function dump_hls_stream {
  # ARGS:
  # 1: channel
  # 2: output file
  [ -d $TMPPATH ] || exit 1

  set_stream_data_from_api $1
  
 # Ugly: We need to print the canonical channel name _before_
  # we start downling in record mode
  $record && ! $quiet && echo "$stream_data_channelname"

  # get highest quality stream
  selected_streamurl="$(curl \
      --silent \
      --fail \
      "$stream_data_url" | \
    grep '^http.*\.m3u8' | \
    sort -V | \
    tail -n1)"
  
# Use differenct container format depending on whether we record or watch live
  # flv is designed for live streaming. It supports reading from it while data is
  # still appended
  # mkv cannot easily be read from while it is written, but unlike flv it allows
  # to quickly seek within the file without reading the whole file.
  # For given reasons, mkv is used for recording and flv for live watching.
  containerformat=$( $record && echo "matroska" || echo "flv" )
  # hls dump command
  avconv -y -v quiet -re -i "$selected_streamurl" -c copy -f $containerformat "$2"  &
  PID=$!
}

# Compose player command
PLAYERCMD="$PLAYER $([ "$PLAYER" == "mpv" ] && echo $MPVOPTS || echo $MPLAYEROPTS) "

# Compose output filename
function compose_outfile {
  # ARG1: Channel
  if $record
  then
    if $showname
    then
      OUTFILE="${RECORDPATH}/$(echo ${SHOWNAME} | sed 's|/|-|g')-$(date +%Y%m%d%H%M).mkv"
    else
      OUTFILE="${RECORDPATH}/${1}-$(date +%Y%m%d%H%M).mkv"
    fi
  else
    OUTFILE="$TMPPATH/${1}_live.flv"
  fi
}

# recorder (mkv) / player with progressbar and caching (flv)
function player_recorder {
  # ARGS:
  # 1: Channel
  compose_outfile "$1"
  if $record
  then
    $quiet || echo -n "Now recording: "
    dump_hls_stream "$1" "$OUTFILE" || return 1
  else
    # Hide the terminal cursor
    tput civis -- invisible
    if $LIVEPAUSE
    then
      # Make sure there is an empty OUTFILE
      > "$OUTFILE"
      dump_hls_stream "$1" "$OUTFILE" || return 1

      # calculate buffer size from bitrate of selected stream
      # so that we get consistent waiting times independent from bitrate
      BITRATE=$(echo "$selected_streamurl" | cut -d'/' -f9)
      BUFFER=$(( BITRATE * BUFFERSECONDS / 8 ))

      # Only start mplayer after having downloaded BUFFER bytes
      eval $(resize)
      PROGRESSBARWIDTH=$(( $COLUMNS - 20 ))
      OUTFILESIZE=0
      while [  "$OUTFILESIZE" -lt "$BUFFER" ]
      do
        OUTFILESIZE=$(du -b "$OUTFILE" | cut -f1)
        if ! $quiet
        then
          echo -ne "\r"
          echo -n "  Buffering: ["
          progresscount=$(( $OUTFILESIZE * $PROGRESSBARWIDTH / $BUFFER ))
          progresscount=$((PROGRESSBARWIDTH < progresscount ? PROGRESSBARWIDTH : progresscount))
          for i in $(seq $progresscount); do echo -n "="; done
          progressempty=$(( $PROGRESSBARWIDTH - $progresscount ))
          for i in $(seq $progressempty); do echo -n " "; done
          echo -n "]"
        fi
        sleep 0.1
        if ! kill -0 $PID 2> /dev/null
        then
          code=$(wait $PID; echo $?)
          echo "avconv returned an error code: $code" 1>&2
          sleep 2
          return 1
        fi
      done
      echo -ne "\033[2K" # this clears the current line
      $quiet || echo -ne "\rNow playing: $stream_data_channelname"
      $PLAYERCMD "$OUTFILE" 2> /dev/null
      echo -ne "\033[2K" # this clears the current line
      kill $PID
      rm "$OUTFILE"
    else
      echo -ne "\033[2K" # this clears the current line
      set_stream_data_from_api "$1"
      $quiet || echo -ne "\rNow playing: $stream_data_channelname"
      $PLAYERCMD "$stream_data_url" 2> /dev/null
    fi
  fi
}

# Da Keestroke Waitah
function  wait_s_key {
  $quiet || echo "Press the 's' key to stop the recording." 
  keypress=""
  while [ "$keypress" != "s" ]
  do
    read -s -n1  keypress
  done
}

# Da Time Valeditee Checkah
function check_time_validity {
  # ARGS:
  # 1: datetime string
  if ! date -d "$1" > /dev/null
  then
    echo "Could not understand time format." 1>&2
    exit 1
  fi
}

# test channel input validity
function channel_validity {
  # ARGS:
  # 1: channel
  if [ -z "$CHANNEL" ]
  then
    echo "Please specify a channel"
    return 1
  elif print_channel_list | grep -i "^${1}$" > /dev/null
  then
    return 0
  else
    echo "'$CHANNEL' is not a valid channel." 1>&2
    echo "Use '--list' to display available channels." 1>&2
    return 1
  fi
}


# interface appearance
function set_ui_window_params {
  # ARGS:
  # 1: border size
  eval `resize`
  BOXWIDTH=$(( $LINES - 2 * $1 ))
  BOXHEIGHT=$(( $COLUMNS - 2 * $1 ))
  CONTENTHEIGHT=$(( $LINES - 2 * $1 - 8 ))
  TITLE="watchteleboy $VERSION"
  BUTTONLABEL=$( $record && echo "Record" || echo "Play" )
}

# channel dialog
function channel_dialog {
  while true
  do
    chanlist="$(print_channel_list) $( uname | grep "Darwin" > /dev/null && echo QUIT)"
    if $whiptail
    then
      wpsetdefault=""
      [ "$CHANNEL" != "" ] \
        && wpsetdefault="--default-item $CHANNEL" \
        || wpsetdefault=""
      unset whiptail_opts; i=0
      for i in $(echo $chanlist); 
      do 
        whiptail_opts+=("$i")
        whiptail_opts+=("Play channel $i")
      done
      set_ui_window_params 2
      CHANNEL=$(whiptail $wpsetdefault \
        --title "$TITLE" \
        --ok-button "$BUTTONLABEL" \
        --cancel-button Quit \
        --menu "Choose a channel:" \
        $BOXWIDTH $BOXHEIGHT $CONTENTHEIGHT \
        "${whiptail_opts[@]}" 3>&2 2>&1 1>&3 )
      [ "$?" != "0" ] && exit 0;
    else
      clear
      eval $(resize)
      repeat=$(( $COLUMNS - 21 ))
      echo -n "= AVAILABLE CHANNELS "
      for ch in $(seq $repeat); do echo -n "="; done
      echo -ne "\n"
      echo "" 
      PS3="
Choose a channel: "
      select CHANNEL in $chanlist
      do 
        [ "$CHANNEL" == "QUIT" ] && exit 0
        [ "$CHANNEL" != "" ] && break
      done
    fi  
    break
  done 
}

function starttime_dialog {
  while true
  do
    if $whiptail
    then
      set_ui_window_params 2
      STARTTIME=$(whiptail \
        --title "$TITLE" \
        --inputbox "\nStart recording at:" \
        $BOXWIDTH $BOXHEIGHT "$(date --rfc-3339=date) 20:15" \
        3>&2 2>&1 1>&3 )
      [ "$?" != "0" ] && exit 0;
    else
      echo -n "Start recording at: "
      read STARTTIME
    fi
    if date -d "$STARTTIME" > /dev/null 2>&1
    then
      if [ $(date -d "$STARTTIME" +%s) -lt $(date +%s) ]
      then
        if $whiptail 
        then
          whiptail --title "$TITLE" --msgbox \
            " The specified time:\n\n    ${STARTTIME}\n\nis already over." \
            $BOXWIDTH $BOXHEIGHT
        else
          echo -e "The specified time:\n    ${STARTTIME}\nis already over."  
        fi  
      else
        break
      fi
    else
      if $whiptail
      then
        whiptail --title "$TITLE" --msgbox \
          " The specified time:\n\n    ${STARTTIME}\n\ncould not be parsed." \
          $BOXWIDTH $BOXHEIGHT
      else
        echo -e "The specified time:\n    ${STARTTIME}\ncould not be parsed."
      fi
    fi
  done
}

function endtime_dialog {
  while true
  do
    if $whiptail
    then
      set_ui_window_params 2
      endtimeinit=$(( $(date -d "$STARTTIME" +%s) + 3600 ))
      ENDTIME=$(whiptail \
	--title "$TITLE" \
	--inputbox "\nStop recording at:" \
	$BOXWIDTH $BOXHEIGHT "$(date -d @${endtimeinit} '+%Y-%m-%d %H:%M')" \
	3>&2 2>&1 1>&3 )
      [ "$?" != "0" ] && exit 0;
    else
      echo -n "Stop recording at: "
      read ENDTIME
    fi
    if date -d "$ENDTIME" > /dev/null 2>&1
    then
      if [ $(date -d "$ENDTIME" +%s) -lt $(date -d "$STARTTIME" +%s) ]
      then
        if $whiptail
        then
	  whiptail --title "$TITLE" --msgbox \
	    " The specified time:\n\n    ${ENDTIME}\n\nis before start time ($STARTTIME)." \
	    $BOXWIDTH $BOXHEIGHT
         else
           echo -e "The specified time:\n    ${ENDTIME}\nis before start time ($STARTTIME)."
         fi
      else
        break
      fi
    else
      if $whiptail
      then
	whiptail --title "$TITLE" --msgbox \
	  " The specified time:\n\n    ${ENDTIME}\n\ncould not be parsed." \
	  $BOXWIDTH $BOXHEIGHT
      else
        echo -e "The specified time:\n    ${ENDTIME}\ncould not be parsed."
      fi
    fi
  done
}

function ifschedule_dialog {
  if $whiptail
  then
    set_ui_window_params 2
    answer=$(whiptail \
      --title "$TITLE" \
      --menu "What do you want to do?" \
      $BOXWIDTH $BOXHEIGHT $CONTENTHEIGHT \
      "1)" "Start recording immediately" "2)" "Schedule a recording" \
      3>&2 2>&1 1>&3 )
    [ "$?" != "0" ] && exit 0;
    [ "$answer" = "2)" ] && return 0 || return 1
  else
    clear
    echo "What do you want to do?"
    PS3="Choose action: "
    select answer in "Start recording immediately" "Schedule a recording"
    do
      [ "$answer" != "" ] && break 
    done 
    [ "$answer" = "Schedule a recording" ] && return 0 || return 1
  fi
}

function showname_dialog {
  while true
  do
    if $whiptail
    then
      set_ui_window_params 2
      shownameinit=$($showname && echo $SHOWNAME || echo $CHANNEL)
      SHOWNAME=$(whiptail \
	--title "$TITLE" \
	--inputbox "\nEnter the name of the show:" \
	$BOXWIDTH $BOXHEIGHT "$shownameinit" \
	3>&2 2>&1 1>&3 )
      [ "$?" != "0" ] && exit 0;
    else
      echo -n "Enter the name of the show: "
      read SHOWNAME
    fi
    showname=true
    [ "$SHOWNAME" = "" ] || break
  done
}

function recordpath_dialog {
  while true
  do
    if $whiptail
    then
      set_ui_window_params 2
      RECORDPATH=$(whiptail \
	--title "$TITLE" \
	--inputbox "\nSpecify a directory to save the recording:" \
	$BOXWIDTH $BOXHEIGHT "$RECORDPATH" \
	3>&2 2>&1 1>&3 )
      [ "$?" != "0" ] && exit 0;
    else
      echo "Specify a directory to save the recording"
      echo "(default: $RECORDPATH)"
      echo -n ":"
      read RECORDPATHINPUT
      [ "$RECORDPATHINPUT" != "" ] && RECORDPATH=$RECORDPATHINPUT
    fi
    if [ ! -d "$RECORDPATH" ] 
    then
      if $whiptail
      then
	whiptail --title "$TITLE" --msgbox \
	  " The specified directory:\n\n    ${RECORDPATH}\n\ndoes not exist." \
	  $BOXWIDTH $BOXHEIGHT
      else
        echo -e "The specified directory:\n    ${RECORDPATH}\ndoes not exist."
      fi
    elif [ ! -w "$RECORDPATH" ]
    then
      if $whiptail
      then
	whiptail --title "$TITLE" --msgbox \
	  " You don't have permission to write to:\n\n    ${RECORDPATH}\n\n" \
	  $BOXWIDTH $BOXHEIGHT
      else
        echo -e "You don't have permission to write to:\n    ${RECORDPATH}\n"
      fi
    else
      break
    fi
  done
}

function confirm_dialog {
  summary="Scheduled for recording:

Start time:    $(date -d "${STARTTIME}" "+%a, %F %H:%M")
End time:      $(date -d "${ENDTIME}" "+%a, %F %H:%M")
Channel:       ${CHANNEL}
Show:          ${SHOWNAME}
Directory:     ${RECORDPATH}

Are those settings correct?"
  if $whiptail
  then
    set_ui_window_params 2
    answer=$(whiptail --title "$TITLE" --yesno \
      "$summary" $BOXWIDTH $BOXHEIGHT 3>&2 2>&1 1>&3 )
 else
   echo -n "$summary (Y/n): "
   read answerinput
   answer=$([ "$answerinput" == "y" ] || [ "$answerinput" == "" ] && echo 0 || echo 1)
 fi
 return $answer
}

# record option check
function require_r_opt {
  # ARGS:
  # 1: option name
  if $record
  then
    return 0
  else
    echo "The option '--${1}' requires the '--record' option" 1>&2
    exit 1
  fi
}

# schedule a recording into crontab
crontempfile="${TMPPATH}/crontab.tmp"
function write_to_crontab {
  # when using this function make sure that
  # the necessary vars are set
  # mandatory: CHANNEL, STARTTIME, DURATION
  DELETEME=${RANDOM}${RANDOM}
  crontab -l > /dev/null 2>&1 && crontab -l > $crontempfile || touch $crontempfile
  echo -ne "$(date -d "$STARTTIME" +"%M %H %d %m") *\t$(readlink -f ${0} || basename ${0}) --record " >> $crontempfile
  echo -ne "--quiet --channel '${CHANNEL}' --duration ${DURATION} " >> $crontempfile
  echo -ne "--deleteme ${DELETEME} " >> $crontempfile
  $showname && echo -ne "--showname '${SHOWNAME}' " >> $crontempfile
  echo -ne "--path '${RECORDPATH}'\n" >> $crontempfile
  crontab < $crontempfile
  rm $crontempfile
}

# option -t|--starttime
if $starttime
then
  require_r_opt "starttime"
  if $endtime || $duration
  then
    check_time_validity "$STARTTIME"
    starttimeepoch=$(date -d "$STARTTIME" +%s)
    if [ $starttimeepoch -lt $(date +%s) ]
    then
      echo "The specified start time is already over." 1>&2
      exit 1
    fi
    if $endtime
    then
      check_time_validity "$ENDTIME"
      endtimeepoch=$(date -d "$ENDTIME" +%s)
      if [ $endtimeepoch -lt $starttimeepoch ]
      then
        echo "The specified end time is before the start time." 1>&2
        exit 1
      fi
      let DURATION=$endtimeepoch-$starttimeepoch
    elif $duration
    then
      if ! [ "$DURATION" -ge 0 ] 2>&-
      then
        echo "The specified duration '$DURATION' is not a number." 1>&2
        exit 1
      fi
    fi
    if $channel
    then
      channel_validity $CHANNEL || exit 1
    else
      echo "You need to specify a channel with '--channel'" 1>&2
      exit 1
    fi
    # Now we have validated all required parameters
    if ! $quiet
    then
      echo "Scheduled for recording:"
      echo -e "Start time:\t$(date -d "$STARTTIME" "+%a, %F %H:%M")"
      $endtime && echo -e "End time:\t$(date -d "$ENDTIME" "+%a, %F %H:%M")"
      $duration && echo -e "Duration:\t${DURATION} sec"
      echo -e "Channel:\t$CHANNEL"
      echo -e "Directory:\t$RECORDPATH"
      $showname && echo -e "Show:\t\t$SHOWNAME"
      read -p "Are those settings correct? (Y/n) "
      if [ "$REPLY" == "n" ]
      then
        printerr "Cancelled by user. Quit."
        exit 1
      fi
    fi 
    write_to_crontab
    $quiet || echo "Done."
    exit 0
  else 
    echo "You must specify either --duration or --endtime" 1>&2
    exit 1
  fi
fi

# option --deleteme
if $deleteme
then
  crontab -l > $crontempfile
  sed -i "/$DELETEME/d" $crontempfile
  crontab < $crontempfile
  rm $crontempfile
fi

# option -e|--endtime
if $endtime && ! $duration
then
  require_r_opt "endtime"
  check_time_validity "$ENDTIME"
  endtimeepoch=$(date -d "$ENDTIME" +%s)
  nowepoch=$(date +%s)
  if [ $endtimeepoch -lt $nowepoch ]
  then
    echo "The specified end time is already over." 1>&2
    exit 1
  fi
  let DURATION=${endtimeepoch}-${nowepoch}
  duration=true
fi

# option -d|--duration
if $duration
then
  require_r_opt "duration"
  if ! [ "$DURATION" -ge 0 ] 2>&-
  then
    echo "The specified duration '$DURATION' is not a number." 1>&2
    exit 1
  fi
  channel_validity $CHANNEL || exit 1
  player_recorder $CHANNEL || exit 1
  sleep $DURATION
  kill $PID
  exit 0
fi

# option -c|--channel
if $channel
then
  if channel_validity $CHANNEL
  then
    if $record
    then
      player_recorder $CHANNEL || exit 1
      wait_s_key
      kill $PID
      exit 0
    else
      player_recorder $CHANNEL || exit 1
    fi
    exit 0
  fi
fi

# Loop for interactive mode
while true
do
  if $record
  then
    if ifschedule_dialog
    then
      while true
      do
        channel_dialog
        starttime_dialog
        endtime_dialog
        showname_dialog
        recordpath_dialog
        confirm_dialog && break
      done
      DURATION=$(( $(date -d "$ENDTIME" +%s) - $(date -d "$STARTTIME" +%s) ))
      write_to_crontab
      set_ui_window_params 2
      if $whiptail
      then
        whiptail --title "$TITLE" --msgbox \
          " Successfully added crontab entry:\n\n
$(crontab -l | grep $DELETEME)" \
          $BOXWIDTH $BOXHEIGHT
        else
          echo "Successfully added crontab entry:"
          crontab -l | grep $DELETEME
        fi
      exit 0
    else
      channel_dialog
      player_recorder $CHANNEL || exit 1
      wait_s_key
      kill $PID
      exit 0
    fi
  else
    channel_dialog
    player_recorder $CHANNEL || sleep 2
  fi
done

exit 0
